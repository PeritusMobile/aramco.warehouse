<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Resco.AdvancedList.CF2</name>
    </assembly>
    <members>
        <member name="T:Resco.Controls.AdvancedList.RowCollection">
            <summary>
            Collection of Rows for an AdvancedList.
            </summary>
            <remarks>
            <p>RowCollection is derived from <see cref="T:System.Collections.CollectionBase"/> and supports <see cref="M:Resco.Controls.AdvancedList.RowCollection.Add(Resco.Controls.AdvancedList.Row)"/>, 
            <see cref="M:Resco.Controls.AdvancedList.RowCollection.Insert(System.Int32,Resco.Controls.AdvancedList.Row)"/> and <see cref="M:Resco.Controls.AdvancedList.RowCollection.Remove(Resco.Controls.AdvancedList.Row)"/> methods.
            The <see cref="T:Resco.Controls.AdvancedList.Row"/> can only be in one RowCollection at a time. Whether the Row is in collection
            can be determined by the <see cref="M:Resco.Controls.AdvancedList.RowCollection.Contains(Resco.Controls.AdvancedList.Row)"/> method.
            The index of the row can be determined by the <see cref="M:Resco.Controls.AdvancedList.RowCollection.IndexOf(Resco.Controls.AdvancedList.Row)"/> method. Row collection can 
            be accessed through the indexer <see cref="P:Resco.Controls.AdvancedList.RowCollection.Item(System.Int32)"/>.
            </p>
            <p>Property <see cref="P:Resco.Controls.AdvancedList.RowCollection.SelectedCount"/> contains the count of the selected rows 
            in the collection.</p>
            <p>
            Special method <see cref="M:Resco.Controls.AdvancedList.RowCollection.RemoveByMapping(Resco.Controls.AdvancedList.Mapping)"/> can be used to remove all the rows with the same
            <see cref="T:Resco.Controls.AdvancedList.Mapping"/>, which are suppossed to come from the same data source.
            </p>
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.Add(Resco.Controls.AdvancedList.Row)">
            <summary>
            Adds a Row to the end of the RowCollection.
            </summary>
            <param name="row">The RowTemplate to be added to the end of the RowCollection.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.Insert(System.Int32,Resco.Controls.AdvancedList.Row)">
            <summary>
            Inserts an element into the RowCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="row">The Row to insert.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.Remove(Resco.Controls.AdvancedList.Row)">
            <summary>
            Removes the first occurrence of a specific Row from the RowCollection.
            </summary>
            <param name="row">The <see cref="T:Resco.Controls.AdvancedList.Row"/> to remove from the RowCollection.</param>
            <remarks>Used by the <see cref="M:Resco.Controls.AdvancedList.Row.Delete"/> method.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.IndexOf(Resco.Controls.AdvancedList.Row)">
            <summary>
            Searches for the specified Row and returns the zero-based index of the first occurrence within the entire RowCollection.
            </summary>
            <param name="row">The Row to locate in the RowCollection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire RowCollection, if found; otherwise, -1.</returns>	
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.Contains(Resco.Controls.AdvancedList.Row)">
            <summary>
            Determines whether the RowCollection contains a specific element.
            </summary>
            <param name="value">The Row to locate in the RowCollection.</param>
            <returns>true if the RowCollection contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.OnClear">
            <summary>
            Performs additional custom processes when clearing the contents of the RowCollection.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of the RowCollection.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an element from the RowCollection.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the RowCollection.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param> 
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.RemoveByMapping(Resco.Controls.AdvancedList.Mapping)">
            <summary>
            Removes all rows with selected field mapping from the RowCollection.
            </summary>
            <param name="fieldNames">The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of names, that identifies rows 
            from the same source.</param>
            <returns>Index of first removed row.</returns>
            <remarks>This method is used by the <see cref="M:Resco.Controls.AdvancedList.AdvancedList.Reload"/> method.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.RemoveByMapping(System.Collections.Hashtable)">
            <summary>
            Removes all rows with field mappings from the RowCollection.
            </summary>
            <param name="mappings">The <see cref="T:System.Collections.Hashtable"/> of <see cref="!:Mappings"/>, that identifies rows 
            from the same source.</param>
            <returns>Index of first removed row.</returns>
            <remarks>This method is used <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DataSource"/> needs to reload.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowCollection.Draw(System.Drawing.Graphics,Resco.Controls.AdvancedList.TemplateSet,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Draw the rows.
            </summary>
            <param name="gr">Graphics object to draw into.</param>
            <param name="ts">Set of templates that will be used for drawing rows.</param>
            <param name="width">The width of templates.</param>
            <param name="ymax">Maximum height (in pixels) we have at our disposal for drawing (the height of client
            area).</param>
            <param name="iRow">Index of a row to start drawing from.</param>
            <param name="iRowOffset">Offset of the first drawn row (which index is iRow).</param>
            <returns></returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowCollection.SelectedCount">
            <summary>
            Gets the count of selected rows in the RowCollection.
            </summary>
            <value>The count of selected rows in the RowCollection.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Row at the specified index. 
            </summary>
            <value>The <see cref="T:Resco.Controls.AdvancedList.Row"/> at the specified <paramref name="index"/>.</value>
            <exception cref="T:System.IndexOutOfRangeException">If index is less then 0 or greater or equal to row count, exception is thrown.</exception>
        </member>
        <member name="T:Resco.Controls.AdvancedList.Row">
            <summary>
            Contains data and template binding for the row displayed in the <see cref="T:Resco.Controls.AdvancedList.AdvancedList"/>.
            </summary>
            <remarks>
            <p>There are more ways of creating the <see cref="T:Resco.Controls.AdvancedList.Row"/>, but after the row was created, the 
            number of fields remains constant. Underlying type of the Row is just an array of objects. 
            The number of fields is given by the property <see cref="P:Resco.Controls.AdvancedList.Row.FieldCount"/>.</p>
            <p>The field <see cref="T:Resco.Controls.AdvancedList.Mapping"/> is accessible through property <see cref="P:Resco.Controls.AdvancedList.Row.FieldNames"/>.
            The fields can be mapped to names and accessed with the string indexer <see cref="P:Resco.Controls.AdvancedList.Row.Item(System.String)"/>,
             or unnamed using the <see cref="P:Resco.Controls.AdvancedList.Mapping.Empty"/> mapping, accessing the data with integer indexer 
             <see cref="P:Resco.Controls.AdvancedList.Row.Item(System.Int32)"/>. When mapping is not empty, it must 
             have the same <see cref="P:Resco.Controls.AdvancedList.Mapping.FieldCount"/> as the row.</p>
             <p>Data can be set with the constructor or indexers, or with the method <see cref="M:Resco.Controls.AdvancedList.Row.SetData(System.Collections.ICollection)"/> 
             the data can be read from <see cref="T:System.Collections.ICollection"/> or <see cref="T:System.Data.IDataRecord"/> (data reader).
             When having string data, the property <see cref="P:Resco.Controls.AdvancedList.Row.StringData"/> can be used 
             (used by the designer). To get the data, <see cref="M:Resco.Controls.AdvancedList.Row.GetData(System.Object[])"/> method can be used.</p>
             <p><see cref="P:Resco.Controls.AdvancedList.Row.TemplateIndex"/> and <see cref="P:Resco.Controls.AdvancedList.Row.SelectedTemplateIndex"/> are used to bind the
             row with the templates from <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> in the template set. 
             Which template is used
             is dependent on whether the row is <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/> or not.</p>
             <note type="inheritinfo">Non-public properties and methods can e a subject of change during
             further developement.</note>
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This constructor is used for the derived classes.
            </summary>
            <remarks>The constructor sets mapping to null and creates no data. Most data manipulation methods doesn't work (throws exception) after using this constructor. You must override the following members:
            <list type="bullet">
            <item><description><see cref="M:Resco.Controls.AdvancedList.Row.SetData(System.Collections.ICollection)"/></description></item>
            <item><description><see cref="M:Resco.Controls.AdvancedList.Row.GetData(System.Object[])"/></description></item>
            <item><description><see cref="P:Resco.Controls.AdvancedList.Row.FieldCount"/></description></item>
            <item><description><see cref="P:Resco.Controls.AdvancedList.Row.Item(System.Int32)"/></description></item>
            <item><description><see cref="P:Resco.Controls.AdvancedList.Row.Item(System.String)"/></description></item>
            </list><p>The <see cref="P:Resco.Controls.AdvancedList.Row.StringData"/> property is not get/set in derived rows using this constructor.</p></remarks>
            <param name="templateIndex">The template index.</param>
            <param name="selectedTemplateIndex">The selected template index.</param>
            <param name="activeTempalteIndex">The active template index.</param>
            <param name="alternateTemplateIndex">The alternate template index.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32)">
            <summary>
            This constructor is used for the derived classes.
            </summary>
            <remarks>The constructor sets mapping to null and creates no data. Most data manipulation methods doesn't work (throws exception) after using this constructor. You must override the following members:
            <list type="bullet">
            <item><description><see cref="M:Resco.Controls.AdvancedList.Row.SetData(System.Collections.ICollection)"/></description></item>
            <item><description><see cref="M:Resco.Controls.AdvancedList.Row.GetData(System.Object[])"/></description></item>
            <item><description><see cref="P:Resco.Controls.AdvancedList.Row.FieldCount"/></description></item>
            <item><description><see cref="P:Resco.Controls.AdvancedList.Row.Item(System.Int32)"/></description></item>
            <item><description><see cref="P:Resco.Controls.AdvancedList.Row.Item(System.String)"/></description></item>
            </list><p>The <see cref="P:Resco.Controls.AdvancedList.Row.StringData"/> property is not get/set in derived rows using this constructor.</p></remarks>
            <param name="templateIndex">The template index.</param>
            <param name="selectedTemplateIndex">The selected template index.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor">
            <summary>
            Creates new empty row.
            </summary>
            <remarks>This default constructor is used only by the designer, or to create empty data, e.g.
            for header bound to template with only constant <see cref="T:Resco.Controls.AdvancedList.CellSource"/>.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Collections.ICollection,Resco.Controls.AdvancedList.Mapping)">
            <summary>
            Creates new row, with chosen template indices and mapped data.
            </summary>
            <param name="templateIndex">Index to <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> template set.</param>
            <param name="selectedTemplateIndex">Index to <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> template set
             to use when the row is <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/>.</param>
            <param name="dataList"><see cref="T:System.Collections.ICollection"/> of field values.</param>
            <param name="fieldNames">The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of the field names, or 
            <see cref="P:Resco.Controls.AdvancedList.Mapping.Empty"/>.</param>
            <remarks>Use this constructor when you already have the data.</remarks>
            <example>
            <sample name="Row1">
        <code lang="Visual Basic"><![CDATA[
' this is how to create the row from known values
Dim Names() As String = {"Id", "Name", "Salary"}
Dim Values() As Object = {1, "John Smith", 50000}
Dim Map As New Mapping(Names)
Dim DataRow As New Row(0, 1, Values, Map)
' add it to RowCollection
AdvancedList1.DataRows.Add(DataRow)
            ]]></code>
        <code lang="C#"><![CDATA[
// this is how to create the row from known values
Row row = new Row(0, 1, 
                   new object[] {1, "John Smith", 50000},
                   new string[] {"Id", "Name", "Salary"});
// add it to RowCollection
advancedList1.DataRows.Add(row);
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.ICollection,Resco.Controls.AdvancedList.Mapping)">
            <summary>
            Creates new row, with chosen template indices and mapped data.
            </summary>
            <param name="templateIndex">Index to <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> template set.</param>
            <param name="selectedTemplateIndex">Index to <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> template set
             to use when the row is <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/>.</param>
            <param name="activeTempalteIndex">The active template index.</param>
            <param name="alternateTemplateIndex">The alternate template index.</param>
            <param name="dataList"><see cref="T:System.Collections.ICollection"/> of field values.</param>
            <param name="fieldNames">The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of the field names, or 
            <see cref="P:Resco.Controls.AdvancedList.Mapping.Empty"/>.</param>
            <remarks>Use this constructor when you already have the data.</remarks>
            <example>
            <sample name="Row1">
        <code lang="Visual Basic"><![CDATA[
' this is how to create the row from known values
Dim Names() As String = {"Id", "Name", "Salary"}
Dim Values() As Object = {1, "John Smith", 50000}
Dim Map As New Mapping(Names)
Dim DataRow As New Row(0, 1, Values, Map)
' add it to RowCollection
AdvancedList1.DataRows.Add(DataRow)
            ]]></code>
        <code lang="C#"><![CDATA[
// this is how to create the row from known values
Row row = new Row(0, 1, 
                   new object[] {1, "John Smith", 50000},
                   new string[] {"Id", "Name", "Salary"});
// add it to RowCollection
advancedList1.DataRows.Add(row);
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Collections.ICollection)">
            <summary>
            Creates new row, with chosen template indices and data without field names.
            </summary>
            <param name="templateIndex">Index to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> template set.
            </param>
            <param name="selectedTemplateIndex">Index to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> 
            template set to use when the row is <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/>.</param>
            <param name="dataList"><see cref="T:System.Collections.ICollection"/> of field values.</param>
            <remarks>Uses the <see cref="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Collections.ICollection,Resco.Controls.AdvancedList.Mapping)"/> with 
            <paramref name="fieldNames"/> set to <see cref="P:Resco.Controls.AdvancedList.Mapping.Empty"/>.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.ICollection)">
            <summary>
            Creates new row, with chosen template indices and data without field names.
            </summary>
            <param name="templateIndex">Index to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> template set.
            </param>
            <param name="selectedTemplateIndex">Index to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> 
            template set to use when the row is <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/>.</param>
            <param name="activeTempalteIndex">The active template index.</param>
            <param name="alternateTemplateIndex">The alternate template index.</param>
            <param name="dataList"><see cref="T:System.Collections.ICollection"/> of field values.</param>
            <remarks>Uses the <see cref="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Collections.ICollection,Resco.Controls.AdvancedList.Mapping)"/> with 
            <paramref name="fieldNames"/> set to <see cref="P:Resco.Controls.AdvancedList.Mapping.Empty"/>.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Collections.ICollection)">
            <summary>
            Creates new row, with chosen template indices and data without field names.
            </summary>
            <param name="templateIndex">Index to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> template set.
            </param>
            <param name="selectedTemplateIndex">Index to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> 
            template set to use when the row is <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/>.</param>
            <param name="activeTempalteIndex">The active template index.</param>
            <param name="alternateTemplateIndex">The alternate template index.</param>
            <param name="tag">Tag for Row</param>
            <param name="dataList"><see cref="T:System.Collections.ICollection"/> of field values.</param>
            <remarks>Uses the <see cref="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Collections.ICollection,Resco.Controls.AdvancedList.Mapping)"/> with 
            <paramref name="fieldNames"/> set to <see cref="P:Resco.Controls.AdvancedList.Mapping.Empty"/>.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,Resco.Controls.AdvancedList.Mapping)">
            <summary>
            Creates new Row, with chosen template indices and field names, without data.
            </summary>
            <param name="templateIndex">Index to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> template set.
            </param>
            <param name="selectedTemplateIndex">Index to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> 
            template set to use when the row is <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/>.</param>
            <param name="fieldNames">The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of the field names, or 
            <see cref="P:Resco.Controls.AdvancedList.Mapping.Empty"/>.</param>
            <remarks>Use this constructor when mapping is known, and data will be set afterwards,
            e. g. from the data reader.</remarks>
            <example>
            <sample name="RowReader">
        <code lang="Visual Basic"><![CDATA[
' this is how to create the row from data reader
Dim map As New Mapping(reader)
Dim r As New Row(0, 1, map)
r.SetData(reader)
            ]]></code>
        <code lang="C#"><![CDATA[
// this is how to create the row from data reader
Mapping map = new Mapping(reader);
Row row = new Row(0, 1, map);
row.SetData(reader);
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new row, with chosen template indices, without data  and field names.
            </summary>
            <param name="templateIndex">Index to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> template set.
            </param>
            <param name="selectedTemplateIndex">Index to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> 
            template set to use when the row is <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/>.</param>
            <param name="fieldCount">Number of fields to create.</param>
            <remarks>Use this constructor when fields are not named (using empty mapping), 
            and data will be set afterwards, e. g. from the collection.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32)">
            <summary>
            Create empty row, with selected number of fields without names.
            </summary>
            <param name="fieldCount">Number of fields to create.</param>
            <remarks>Calls the <see cref="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,System.Int32)"/> overload with the default template
            indices set to 0.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(Resco.Controls.AdvancedList.Mapping)">
            <summary>
            Create empty row, with selected named fields.
            </summary>
            <param name="fieldNames">The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of the field names, or 
            <see cref="P:Resco.Controls.AdvancedList.Mapping.Empty"/>.</param>
            <remarks>Calls the <see cref="M:Resco.Controls.AdvancedList.Row.#ctor(System.Int32,System.Int32,Resco.Controls.AdvancedList.Mapping)"/> overload with the default template
            indices set to 0.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.#ctor(Resco.Controls.AdvancedList.Row)">
            <summary>
            Copy constructor.
            </summary>
            <remarks>Creates the row, that is the deep copy of the given row.</remarks>
            <param name="toCopy"><see cref="T:Resco.Controls.AdvancedList.Row"/> to be copied.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.Update">
            <summary>
            Update changes made to StringData.
            </summary>
            <remarks>When you change StringData, you can notify Row to update using this function.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.SetData(System.Collections.ICollection)">
            <summary>
            Copies the data from the collection to the row.
            </summary>
            <remarks>The old data are overwritten. The count of new data can be different then the field count of row.</remarks>
            <param name="data">Collection of data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.GetData(System.Object[])">
            <summary>
            Make the copy of internal data to object array.
            </summary>
            <param name="data"><see cref="T:System.Array"/> of objects, length of the array must be equal 
            to field count of the row.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="data"/> has different
            <see cref="P:System.Array.Length"/> as the <see cref="P:Resco.Controls.AdvancedList.Row.FieldCount"/> of the Row.</exception>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.SetData(System.Data.IDataRecord)">
            <summary>
            Copies the data from data reader or other data records.
            </summary>
            <param name="reader">Data reader or other implementation of <see cref="T:System.Data.IDataRecord"/>.</param>
            <remarks>Old data are overwritten. The field count is changed to the <see cref="P:System.Data.IDataRecord.FieldCount"/> of the <paramref name="reader"/>. Data mapping is ignored when loading 
            the data. It is recommended to (re)create the mapping from the <paramref name="reader"/></remarks>
            <example>
            <p>In this example is the typical usage of this method:</p>
            <sample name="RowReader">
        <code lang="Visual Basic"><![CDATA[
' this is how to create the row from data reader
Dim map As New Mapping(reader)
Dim r As New Row(0, 1, map)
r.SetData(reader)
            ]]></code>
        <code lang="C#"><![CDATA[
// this is how to create the row from data reader
Mapping map = new Mapping(reader);
Row row = new Row(0, 1, map);
row.SetData(reader);
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.ToString">
            <summary>
            Returns a String that represents the current Row.
            </summary>
            <returns>A String that represents the current Row.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.GetTemplate(Resco.Controls.AdvancedList.TemplateSet)">
            <summary>
            Gets the current <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> for this row from chosen <see cref="T:Resco.Controls.AdvancedList.TemplateSet"/>.
            </summary>
            <param name="ts">The <see cref="T:Resco.Controls.AdvancedList.TemplateSet"/> to get the template from.</param>
            <returns>The <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> to use.</returns>
            <remarks>If the template index points to non-existing template, the 
            <see cref="P:Resco.Controls.AdvancedList.RowTemplate.Default"/> template is returned.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.GetHeight(Resco.Controls.AdvancedList.TemplateSet)">
            <summary>
            Gets the current row template height for this row from chosen template set.
            </summary>
            <param name="ts">The <see cref="T:Resco.Controls.AdvancedList.TemplateSet"/> to get the template from.</param>
            <returns>The <see cref="P:Resco.Controls.AdvancedList.RowTemplate.Height"/> of the current row template.</returns>
            <remarks>If the template index points to non-existing template, the 
            <see cref="P:Resco.Controls.AdvancedList.RowTemplate.Default"/> template is used to get height.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.Delete">
            <summary>
            Removes the row from parent RowCollection.
            </summary>
            <remarks>Call the <see cref="M:Resco.Controls.AdvancedList.RowCollection.Remove(Resco.Controls.AdvancedList.Row)"/> method of the parent,
            row is no longer used, can be added to another RowCollection.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Row.OnChanged">
            <summary>
            Raises the RowChanged event to redraw the parent.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Row.m_pParent">
            <summary>
            RowCollection which contains the row.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Row.m_htMap">
            <summary>
            Row mapping
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Row.m_iTemplate">
            <summary>
            Template index.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Row.m_iSelectedTemplate">
            <summary>
            Selected template index.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Row.m_iActiveTemplate">
            <summary>
            Active template index.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Row.m_iAlternateTemplate">
            <summary>
            Alternate position template index.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Row.m_oData">
            <summary>
            Row data
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Row.m_tag">
            <summary>
            data stored as Tag property
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.StringData">
            <summary>
            Gets or sets the row data converted to string array.
            </summary>
            <value>The row data converted to string array.</value>
            <remarks>This property is used by the visual designer.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.Item(System.Int32)">
            <summary>
            Gets or sets the data at given index.
            </summary>
            <value>The data at given index.</value>
            <remarks>The index bounds are checked and <see langword="null"/> is returned, 
            or value is not set, when the index is incorrect.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.Item(System.String)">
            <summary>
            Gets or sets the data in the named field.
            </summary>
            <value>The data in the named field.</value>
            <remarks>If the field is not found in the mapping, <see langword="null"/> is returned,  or
            value is not set.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.Template">
            <summary>
            Gets the current <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> for this row.
            </summary>
            <value>The current <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/>.</value>
            <remarks>If the template index points to non-existing template, the 
            <see cref="P:Resco.Controls.AdvancedList.RowTemplate.Default"/> template is returned.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.Height">
            <summary>
            Gets the current row template height for this row.
            </summary>
            <value>The <see cref="P:Resco.Controls.AdvancedList.RowTemplate.Height"/> of the current row template.</value>
            <remarks>If the template index points to non-existing template, the 
            <see cref="P:Resco.Controls.AdvancedList.RowTemplate.Default"/> template is used to get height.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.TemplateIndex">
            <summary>
            Gets or sets the template index, which is used when the row is not selected.
            </summary>
            <value>The template index, which is used when the row is not <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.CurrentTemplateIndex">
            <summary>
            Gets the current template index, which depends on whether the row is selected or not.
            </summary>
            <value><see cref="P:Resco.Controls.AdvancedList.Row.SelectedTemplateIndex"/> when the row is <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/>,
            otherwise <see cref="P:Resco.Controls.AdvancedList.Row.TemplateIndex"/>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.SelectedTemplateIndex">
            <summary>
            Gets or sets the selected template index, it is used for drawing the row when it is selected.
            </summary>
            <value>The template index, which is used when the row is <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.ActiveTemplateIndex">
            <summary>
            Gets or sets the active template index, it is used for drawing the row when it is active.
            </summary>
            <value>The template index, which is used when the row is <see cref="P:Resco.Controls.AdvancedList.Row.Active"/>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.AlternateTemplateIndex">
            <summary>
            Gets or sets the alternate template index, it is used for drawing the alternating row.
            </summary>
            <value>The template index, which is used when the row is at odd poisition in list.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.Selected">
            <summary>
            Gets or sets whether the row is selected.
            </summary>
            <value>true if row is selected, otherwise false.</value>
            <remarks>
            <p>Setting directly the Selected property of a Row does not fire RowSelect event.</p>
            <p>When the row is selected, the <see cref="P:Resco.Controls.AdvancedList.Row.SelectedTemplateIndex"/> is used to display
            the row, otherwise the <see cref="P:Resco.Controls.AdvancedList.Row.TemplateIndex"/> is used to display row..</p>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.Active">
            <summary>
            Gets or sets whether the row is active.
            </summary>
            <value>true if row is active, otherwise false.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.Tag">
            <summary>
            Gets or sets the object that contains data about the control.
            </summary>
            <value>An object that contains data about the row. The default is null reference.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.FieldCount">
            <summary>
            Gets the number of fields in row.
            </summary>
            <value>The number of fields in row.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.FieldNames">
            <summary>
            Gets or sets the mapping of field names.
            </summary>
            <value>The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of field names.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Row.Parent">
            <summary>
            Gets or sets the row collection in which row is contained.
            </summary>
            <value>The row collection in which row is contained.</value>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CellSourceType">
            <summary>
            Type of cell source
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.CellSourceType.Constant">
            <summary>
            Cell source is bound to constant data
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.CellSourceType.ColumnIndex">
            <summary>
            Cell source is bound to column index
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.CellSourceType.ColumnName">
            <summary>
            Cell source is bound to column name
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.AdvancedList">
            <summary>
            Resco AdvancedList Control
            </summary>
            <remarks>
            <p>Resco AdvancedList control enables you to display a list of rows to the user 
            that the user can select or deselect by clicking. This behavior is controled by the 
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectionMode"/> property. An AdvancedList control can provide single or multiple 
            selections using the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.MultiSelect"/> property. You can handle the 
            <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowSelect"/> event to do some additional processing when the row is 
            selected or deselected. You can also set the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedRow"/> or get the array of the 
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedRows"/>. Or you can just use the <see cref="M:Resco.Controls.AdvancedList.AdvancedList.EnsureVisible(Resco.Controls.AdvancedList.Row)"/> function, to 
            scroll the control to desired row.</p>
            <p>The AdvancedList displays each <see cref="T:Resco.Controls.AdvancedList.Row"/> in the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DataRows"/> collection with 
            defined <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> which depends on whether the <see cref="T:Resco.Controls.AdvancedList.Row"/>
            is selected or not. All the templates are stored in the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> collection and provides 
            rich user interface experience, using various types of <see cref="T:Resco.Controls.AdvancedList.Cell"/>s to display data. 
            You can handle the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.CellClick"/> event to give response when the user clicked the cell.
            Or you can use the <see cref="T:Resco.Controls.AdvancedList.LinkCell"/> and handle the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.LinkClick"/> event for 
            similar user experience.</p>
            <p>The control can also display <see cref="P:Resco.Controls.AdvancedList.AdvancedList.HeaderRow"/> which is not scrolled away, 
            if the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.ShowHeader"/> property is set to true. With the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.GridLines"/> and 
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.GridColor"/> properties you can control, you can control if there the gridlines
            between rows are displayed and their color. The overall look of control can be tuned with the 
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Border"/> and <see cref="P:Resco.Controls.AdvancedList.AdvancedList.BackColor"/> properties.</p>
            <p>You can use the built-in <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DbConnector"/> to easily load the data from SqlCe or other 
            database, or you can provide your own <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DataConnector"/>. When adding the data rows, 
            you can handle the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.ValidateData"/> event for more customization. 
            When manualy loading the data or doing more operations with the AdvancedList it is recomended 
            to use the <see cref="M:Resco.Controls.AdvancedList.AdvancedList.BeginInit"/> and <see cref="M:Resco.Controls.AdvancedList.AdvancedList.EndInit"/> methods.</p>
            <p>The control is specially designed for Compact Framework and optimized for designing 
            in visual designer. For an examples of usage see the  
            <seealso href="http://www.rescodeveloper.net/support/samples_advancedlist.aspx">Samples</seealso>.</p>
            <note type="inheritinfo">During the further
             developement of the AdvancedList control non-public properties and methods can be 
             a subject to change. 
             It is not recomended to inherit from this class.</note>
            </remarks>
            <seealso cref="T:Resco.Controls.AdvancedList.RowTemplate"/>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.GetBrush(System.Drawing.Color)">
            <summary>
            Get the <see cref="T:System.Drawing.SolidBrush"/> of the given <see cref="T:System.Drawing.Color"/>.
            </summary>
            <remarks>The method is used as an optimalization, that caches the brush for drawing. It is not thread safe.</remarks>
            <param name="c"><see cref="T:System.Drawing.Color"/> of the <see cref="T:System.Drawing.SolidBrush"/>.</param>
            <returns>The <see cref="T:System.Drawing.SolidBrush"/> to be used for painting.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.GetPen(System.Drawing.Color)">
            <summary>
            Get the <see cref="T:System.Drawing.Pen"/> of the given <see cref="T:System.Drawing.Color"/>.
            </summary>
            <remarks>The method is used as an optimalization, that caches the pen for drawing. It is not thread safe.</remarks>
            <param name="c"><see cref="T:System.Drawing.Color"/> of the <see cref="T:System.Drawing.Pen"/>.</param>
            <returns>The <see cref="T:System.Drawing.Pen"/> to be used for painting.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.#ctor">
            <summary>
            Creates new instance of an AdvancedList control.
            </summary>
            <remarks/>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.ShouldSerializeScrollBar">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.HeaderRow"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.ShouldSerializeGradientBackColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.GradientBackColor"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.ResetGradientBackColor">
            <summary>
            Resets the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.GradientBackColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.ShouldSerializeSelectionMode">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectionMode"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnRowSelect(Resco.Controls.AdvancedList.Row,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Fires the RowSelect event.
            </summary>
            <param name="row">Row that was last selected.</param>
            <param name="index">Index of the row.</param>
            <param name="yOffset">Offset of the row from the top.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.EnsureVisible(Resco.Controls.AdvancedList.Row)">
            <summary>
            Scrolls the control to ensure that chosen row is visible and returns the Row vertical offset.
            </summary>
            <param name="row">Row to display.</param>
            <returns>Offset of the Row from the top of the control.</returns>
            <remarks>This method will scroll the control so the desired row is diplayed on the screen.</remarks>
            <example>
            <sample name="EnsureVisible">
        <code lang="Visual Basic"><![CDATA[
Private Sub FindButton_Click(ByVal sender As Object, ByVal e As EventArgs)_
 Handles FindButton.Click
    ' we will search for the Row matching the criteria
    For Each r As Row In AdvancedList1.DataRows
        If IsMatch(r) Then
            'display the found row
            AdvancedList1.EnsureVisible(r)
            Exit Sub
        End If
    Next
    MessageBox.Show("No match")
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
private void FindButton_Click(object sender, EventArgs e)
{
    // we will search for the Row matching the criteria
    foreach (Row r in advancedList1.DataRows)
    {
        if (IsMatch(r))
        {
            advancedList1.EnsureVisible(r);
            return;
        }
    }
    MessageBox.Show("No match");
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.EnsureVisible(Resco.Controls.AdvancedList.Row,System.Boolean)">
            <summary>
            Scrolls the control to ensure that chosen row is visible and returns the Row vertical offset.
            </summary>
            <param name="row">Row to display.</param>
            <param name="bTop">true, if the row should be positioned as the first row</param>
            <returns>Offset of the Row from the top of the control.</returns>
            <remarks>This method will scroll the control so the row with the desired index
             is diplayed on the screen, preferably as the first displayed row.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.EnsureVisible(System.Int32)">
            <summary>
            Scrolls the control to ensure that chosen row is visible and returns the Row vertical offset.
            </summary>
            <param name="ix">Index of the Row to display.</param>
            <returns>Offset of the Row from the top of the control.</returns>
            <remarks>This method will scroll the control so the row with the desired index
             is diplayed on the screen.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.EnsureVisible(System.Int32,System.Boolean)">
            <summary>
            Scrolls the control to ensure that chosen row is visible and returns the Row vertical offset.
            </summary>
            <param name="ix">Index of the Row to display.</param>
            <param name="bTop">true, if the row should be positioned as the first row.</param>
            <returns>Offset of the Row from the top of the control.</returns>
            <remarks>This method will scroll the control so the row with the desired index
             is diplayed on the screen, preferably as the first displayed row.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.EnsureVisible(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Scrolls the control to ensure that chosen row and cell is visible and returns the Row vertical offset.
            </summary>
            <param name="ix">Index of the Row to display.</param>
            <param name="cx">Index of the Cell to display.</param>
            <param name="bTop">true, if the row should be positioned as the first row.</param>
            <returns>Offset of the Row from the top of the control.</returns>
            <remarks>This method will scroll the control so the row and cell with the desired index
             is diplayed on the screen, preferably as the first displayed row.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.SetScrollPos(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the scrollbar position so that given row has selected offset from the top.
            </summary>
            <remarks>This method is not robust and you should be carefull about the supplied arguments.</remarks>
            <param name="ix">Index of the row.</param>
            <param name="offset">Desired offset of the row.</param>
            <returns>Actual offset of the row.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.IsVisible(System.Int32)">
            <summary>
            Determines the visibility of the Row at specified index.
            </summary>
            <remarks>If the Row at position <paramref name="ix"/> is only partially visible, this method returns false.</remarks>
            <param name="ix">Index of the <see cref="T:Resco.Controls.AdvancedList.Row"/>.</param>
            <returns>true, if the Row at index <paramref name="ix"/> is visible, otherwise false</returns>		
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.IsVisible(Resco.Controls.AdvancedList.Row)">
            <summary>
            Determines the visibility of the Row.
            </summary>
            <remarks>If the <paramref name="row"/> is only partially visible, this method returns false.</remarks>
            <param name="row"><see cref="T:Resco.Controls.AdvancedList.Row"/> </param>
            <returns>true, if the <paramref name="row"/> is visible, otherwise false</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnDoubleClick(System.EventArgs)">
            <summary>
            Handles the DoubleClick event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Fires the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowSelect"/>, <see cref="E:Resco.Controls.AdvancedList.AdvancedList.LinkClick"/> and 
            <see cref="E:Resco.Controls.AdvancedList.AdvancedList.CellClick"/> events.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnClick(System.EventArgs)">
            <summary>
            Handles the Click event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Fires the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowSelect"/>, <see cref="E:Resco.Controls.AdvancedList.AdvancedList.LinkClick"/> and 
            <see cref="E:Resco.Controls.AdvancedList.AdvancedList.CellClick"/> events.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.GetCellBounds(System.Int32,System.Int32)">
            <summary>
            Get the drawing bounds of the given cell and row.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellIndex">Index of the cell in the current <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/>, 
            or -1 to get the row bounds.</param>
            <remarks>If the <paramref name="cellIndex"/> is -1, drawing bounds of the <see cref="T:Resco.Controls.AdvancedList.Row"/> specified 
            by the <paramref name="rowIndex"/>. Otherwise drawing bounds of the <paramref name="cellIndex"/>-th cell of the current row template for the given row are returned. If the given row/cell is not visible, <see cref="F:System.Drawing.Rectangle.Empty"/> is returned.</remarks>
            <returns><see cref="T:System.Drawing.Rectangle"/> containing cell/row bounds relative to <see cref="T:Resco.Controls.AdvancedList.AdvancedList"/> control.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.GetRowOffset(System.Int32)">
            <summary>
            Return row offset inside client rectangle get from CalculateClientRect().
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.GetCellAtPoint(System.Drawing.Point)">
            <summary>
            Returns the cell at the specified point.
            </summary>
            <remarks>Use the client coordinates for the point. Returned CellEventArgs are null, if no row is at the point. If the HeaderRow is at the point, the row index returned is -1. If the FooterRow is at the point, the row index returned is -2. If no cell is at the point, the cell index returned is -1.</remarks>
            <exception cref="T:System.ArgumentException"> is thrown when specified point is out of the client rectangle.</exception>
            <param name="pt"><see cref="T:System.Drawing.Point"/> coordinates relative to client rectangle.</param>
            <returns><see cref="T:Resco.Controls.AdvancedList.CellEventArgs"/> specifying the cell at the point.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.ActivateLink(System.Int32,System.Int32)">
            <summary>
            Activates the link at the given row and cell indexes.
            </summary>
            <remarks>Does nothing, if the Row is not visible, or if the cell at given index is not a <see cref="T:Resco.Controls.AdvancedList.LinkCell"/>.</remarks>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellIndex">Index of the cell.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnLink(Resco.Controls.AdvancedList.LinkCell,Resco.Controls.AdvancedList.Row,System.Drawing.Point,System.Int32)">
            <summary>
            Handles the LinkClick event.
            </summary>
            <param name="c">LinkCell that was clicked.</param>
            <param name="r">DataRow that was clicked.</param>
            <param name="index">Point containing indexes of row and cell.</param>
            <param name="yOffset">Vertical offset of the row.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnButton(Resco.Controls.AdvancedList.ButtonCell,Resco.Controls.AdvancedList.Row,System.Drawing.Point,System.Int32)">
            <summary>
            Handles the ButtonClick event.
            </summary>
            <param name="c">ButtonCell that was clicked.</param>
            <param name="r">Row that was clicked.</param>
            <param name="index">Point containing indexes of row and cell.</param>
            <param name="yOffset">Vertical offset of the row.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the OnMouseDown event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the OnMouseUp event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnChange(System.Object,Resco.Controls.AdvancedList.GridEventArgsType,System.Object)">
            <summary>
            Responds to events from the rows, templates and scrolling.
            </summary>
            <param name="sender">sender of event</param>
            <param name="e">type of event</param>
            <param name="oParam">additinal parameters to event</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnResize(System.EventArgs)">
            <summary>
            Handles the resize of the control.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.ShouldSerializeHeaderRow">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.HeaderRow"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.ShouldSerializeFooterRow">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.FooterRow"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.AddTooltipArea(System.Drawing.Rectangle,System.String)">
            <summary>
            Adds the rectangular tooltip area with the given text.
            </summary>
            <remarks>
            <para>Tooltip with given text is displayed in whenever user holds mouse down in the selected area for at least 500 ms.</para>
            <para>Tooltip areas are reset when they are scrolled from view. The best place to update the tooltip areas is from within custom cell's Draw method.</para>
            </remarks>
            <param name="bounds"><see cref="T:System.Drawing.Rectangle"/> within client coordinates.</param>
            <param name="text">Text to display.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.CheckForLink(System.Drawing.Point)">
            <summary>
            Find out if a point is contained within AdvancedList's links.
            </summary>
            <param name="p">Point that will be searched for in AdvancedList's links.</param>
            <returns>True, if p is contained in AdvancedList's links. False otherwise.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.CheckForButton(System.Drawing.Point)">
            <summary>
            Find out if a point is contained within AdvancedList's buttons.
            </summary>
            <param name="p">Point that will be searched for in AdvancedList's buttons.</param>
            <returns>True, if p is contained in AdvancedList's buttons. False otherwise.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.RedrawBackBuffer(System.Boolean)">
            <summary>
            Draws the rows, header, background and border to the backbuffer.
            </summary>
            <returns>true, if the full space was drawn, false if background is visible.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.RedrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background of AdvancedList into back buffer. See remarks section for more details.
            </summary>
            <remarks>
            This method is only called, if at least some part of AdvancedList's background is visible. Method 
            paints the background by drawing a filled rectangle over AdvancedList's background with current
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.BackColor"/>.
            </remarks>
            <param name="g">Graphics object to paint to.</param>
            <param name="rect">Rectangle which the method paints to. You should not paint outside this rectangle.         </param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnParentChanged(System.EventArgs)">
            <summary>
            Handles the ParentChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>EndInit is called</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Handles the PaintBackground event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Handles the Paint event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.Refresh">
            <summary>
            Forces the control to invalidate its client area and immediately redraw itself.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.ScrollBottomOffset">
            <summary>
            Gets or sets the bottom offset of last row.
            </summary>
            <remarks>Default value is -1.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.SetVScrollBar(System.Int32)">
            <summary>
            Sets parameters of a scroll bar according to the provided height.
            </summary>
            <remarks>
            This method sets vertical scroll bar's properties like: Maximum, Minimum, LarcheChange, SmallChange
            according to the height of the whole document that AdvancedList is displaying. It also creates the
            VScrollBar object, if one does not exist yet.
            </remarks>
            <param name="height">Height of the document that AdvancedList is displaying.</param>
            <returns>Returns true, if redraw is needed. If no scroll bar is necessary (the document is smaller
            than AdvancedList's client area), it returns false.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnScroll">
            <summary>
            Fires the scroll event.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.SuspendRedraw">
            <summary>
            Temporarily suspends the redraw for the control.
            </summary>
            <remarks>Control is not redrawn, but the scroll position and height is recalculated.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.ResumeRedraw">
            <summary>
            Resumes normal redraw and immediately redraws control.
            </summary>
            <remarks>Redraws the backbuffer and invalidates the control</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.BeginInit">
            <summary>
            <FONT color="red">Obsolete.</FONT> Signals the object that initialization is starting.
            </summary>
            <remarks>Control is not redrawn and not recalculated.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.BeginUpdate">
            <summary>
            Signals the object that initialization is starting.
            </summary>
            <remarks>Control is not redrawn and not recalculated.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.EndInit">
            <summary>
            <FONT color="red">Obsolete.</FONT> Signals the object that initialization is complete.
            </summary>
            <remarks>Control is recalculated and redrawn.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.EndUpdate">
            <summary>
            Signals the object that initialization is complete.
            </summary>
            <remarks>Control is recalculated and redrawn.</remarks>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.TooltipWidth">
            <summary>
            Width of the tooltip.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_nRowsLoaded">
            <summary>
            Holds the amount of rows that were loaded so far when AdvancedList was bound to a new data source.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_bKeyNavigation">
            <summary>
            Enable or disable internal keyboard navigation.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_iUpdate">
            <summary>
            When in init, Changed event is not handled and control's backbuffer is not redrawn. 
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_bIsChange">
            <summary>
            When there is no change, backbuffer is not redrawn.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_iNoRedraw">
            <summary>
            When no redraw is set, backbuffer is not redrawn.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_rcRows">
            <summary>
            Row collection that contains AdvancedList's Row objects. It is created when AdvancedList is created
            and can only be read.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_doubleBuffered">
            <summary>
            Back buffer image that AdvancedList paints its contents to. When the drawing is finished, back buffer
            is swapped with the graphics object inside the PaintEventArgs.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_BackColor">
            <summary>
            Back color of AdvancedList
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_BorderPen">
            <summary>
            Pen that is used for drawing.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_vScroll">
            <summary>
            Vertical scroll bar
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_vScrollWidth">
            <summary>
            current width of scrollbar
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_iDocumentHeight">
            <summary>
            Height of all the rows when displayed by their CurrentRowTemplate. Changes often.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_iActualRowIndex">
            <summary>
            Index of the row that is topmost in current display.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_iTopmostRowOffset">
            <summary>
            Offset of the topmost row.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_iVScrollPrevValue">
            <summary>
            Previous scroll value.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_iSelectedCellIndex">
            <summary>
            Index of the selected cell.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_bManualDataLoading">
            <summary>
            Says whether AdvancedList should fire the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowAdding"/> event whenever
            it needs to display more rows.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.Reload">
            <summary>
            Reloads the data with the DataConnector.
            </summary>
            <remarks>
            <p><c>Reload</c> method removes the rows that were loaded by the last call 
            to <see cref="M:Resco.Controls.AdvancedList.AdvancedList.LoadData"/> or <c>Reload</c> method and then calls 
            the <see cref="M:Resco.Controls.AdvancedList.AdvancedList.LoadData"/> to refill the row collection. The new data are 
            inserted to a position of the first removed <c>Row</c>.</p>
            <p>If <see cref="M:Resco.Controls.AdvancedList.AdvancedList.LoadData"/> has not been called before, the command only executes 
            <c>LoadData()</c></p>
            <p>As an alternative, you can use the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DataSource"/> property.</p>
            <p>The template indices used for the loaded rows are determined by the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.TemplateIndex"/> and <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedTemplateIndex"/> properties.</p>
            </remarks>
            <example>
            <p>The following example shows the typical usage of Reload method:</p>
            <sample name="AdvancedList.Reload">
        <code lang="Visual Basic"><![CDATA[
Private Sub AdvancedList1_HeaderClick(ByVal sender As Object, _
        ByVal e As Resco.Controls.CellEventArgs) Handles AdvancedList1.HeaderClick
    Dim orderBy As String

    Select Case e.CellIndex
        Case 0 ' Sort ascending
            orderBy = " ORDER BY name ASC"
        Case 1 ' Sort descending
            orderBy = " ORDER BY name DESC"
    End Select

    If Not orderBy Is Nothing Then
        ' Update command text and reload the data
        AdvancedList1.DbConnector.CommandText = "SELECT * FROM customers" & orderBy
        AdvancedList1.Reload()
    End If
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
private void advancedList1_HeaderClick(object sender, Resco.Controls.CellEventArgs e)
{
    string orderBy = null;
    if (e.CellIndex == 0)
        orderBy = " ORDER BY name ASC";
    else if (e.CellIndex == 1)
        orderBy = " ORDER BY name DESC";
    if (orderBy != null)
    {
        // Update command text and reload the data
        advancedList1.DbConnector.CommandText = "SELECT * FROM customers" + orderBy;
        advancedList1.Reload();
    }
}
            ]]></code>
    </sample>
            </example>
            <returns>The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of the loaded data rows.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.LoadData">
            <summary>
            Loads the data with the data connector.
            </summary>
            <remarks><p>The loaded Rows are added to the end of the RowCollection.</p>
            <p>The template indices used for the loaded rows are determined by the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.TemplateIndex"/> and <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedTemplateIndex"/> properties.</p>
            </remarks>
            <example>
            <p>The following example shows the typical usage of LoadData method:</p>
            <sample name="AdvancedList.Load">
        <code lang="Visual Basic"><![CDATA[
Dim myCommand As New System.Data.SqlServerCe.SqlCeCommand("SELECT * FROM customers")
Dim myConnection As New System.Data.SqlServerCe.SqlCeConnection(_
    "DataSource = \\My Documents\\Northwind.sdf")

Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs)    Handles MyBase.Load
    Try
        ' set up the command for the DbConnector (not required, if set in designer)
        myCommand.Connection = myConnection
        AdvancedList1.DbConnector.Command = myCommand

        ' load the data
        AdvancedList1.LoadData()

    Catch ex As System.Data.SqlServerCe.SqlCeException
        MessageBox.Show(ex.Message)
    End Try
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
SqlCeCommand myCommand = new SqlCeCommand("SELECT * FROM customers");
SqlCeConnection myConnection = new SqlCeConnection("DataSource = \\My Documents\\Northwind.sdf");
    
private void Form1_Load(object sender, System.EventArgs e)
{
    try
    {
        // set up the command for the DbConnector (not required, if set in designer)
        myCommand.Connection = myConnection;
        advancedList1.DbConnector.Command = myCommand;

        // load the data
        advancedList1.LoadData();
    }
    catch(SqlCeException ex)
    {
        MessageBox.Show(ex.Message);
    }
}        
            ]]></code>
    </sample>
            </example>
            <returns>The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of the loaded data rows.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.LoadDataManually">
            <summary>
            Fills AdvancedList's RowCollection by user provided Row objects.
            </summary>
            <remarks>
            You have to handle the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowAdding"/> event, otherwise an InvalidOperationException
            will be thrown. In the handler, you must provide a <see cref="T:Resco.Controls.AdvancedList.Row"/> object that will be added into
            AdvancedList's RowCollection. 
            </remarks>
            <seealso cref="E:Resco.Controls.AdvancedList.AdvancedList.RowAdding"/>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.CloseConnector">
            <summary>
            Closes the data connector if it is still open.
            </summary>
            <remarks>Can be used when <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DelayLoad"/> is set to close the connector (and associated connection if applicable).</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.LoadData(System.Int32)">
            <summary>
            Loads the data with the data connector and inserts the loaded Rows to specified position.
            </summary>
            <remarks><p>The loaded Rows are added to the RowCollection at specified index.</p>
            <p>The template indices used for the loaded rows are determined by the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.TemplateIndex"/> and <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedTemplateIndex"/> properties.</p>
            <note type="caution">Do not use this method with <paramref name="iInsertIndex"/> other then -1 when the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DelayLoad"/> property is set to true.</note>
            </remarks>
            <param name="iInsertIndex">Index to the RowCollection indicating where the data should be inserted or <c>-1</c> when the data should be added to the end of the RowCollection.</param>
            <returns>The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of the loaded data rows.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.InsertRow(Resco.Controls.AdvancedList.Row,System.Int32)">
            <summary>
            Insert the <see cref="!:Resco.Controls.Row"/> at the specified index. 
            </summary>
            <param name="row">The <see cref="!:Resco.Controls.Row"/> to insert.</param>
            <param name="insertIndex">The index, where the <see cref="!:Resco.Controls.Row"/> should be inserted.</param>
            <returns>Index to insert the next Row.</returns>
            <remarks><para>When the <paramref name="insertIndex"/> is -1, the <paramref name="row"/> is added to the end of the RowCollection. Otherwise the <paramref name="row"/> is inserted at the specified index.</para>
            <para>Fires the <see cref="!:Resco.Controls.AdvancedList.ValidateData"/> event before the Row is finally inserted.</para></remarks>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_autoBind">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_dataSource">
            <summary>
            Current data source that AdvancedList is bound to.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_enumerator">
            <summary>
            The data source enumerator object used for loading.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.AdvancedList.m_boundMap">
            <summary>
            Column names mapping of currently bound data source.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnBindingContextChanged(System.EventArgs)">
            <summary>
            Handles the changes of binding context.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.SaveXml(System.String)">
            <summary>
            Serializes all of the control properties to XML file in the given path.
            </summary>
            <remarks>The xml file contains all of the properties of AdvancedList and the serialized templates. You can restore them by using <see cref="M:Resco.Controls.AdvancedList.AdvancedList.LoadXml(System.String,Resco.Controls.AdvancedList.AdvancedList.DesignTimeCallback)"/> method. It is not recommended to modify the file.
            <note type="caution">The images from imagelist in <see cref="T:Resco.Controls.AdvancedList.ImageCell"/> are serialized in jpeg format, loosing some of the quality. To prevent serializing images, set the <see cref="P:Resco.Controls.AdvancedList.ImageCell.ImageList"/> property to null before calling this method.</note>
            <note>This method is not supported on Compact Framework.</note></remarks>
            <param name="fileName">The name of the file, to which the properties are serialized.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.SaveXml(System.Xml.XmlWriter)">
            <summary>
            Serializes all of the control properties to <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The xml file contains all of the properties of AdvancedList and the serialized templates. You can restore them by using <see cref="M:Resco.Controls.AdvancedList.AdvancedList.LoadXml(System.String,Resco.Controls.AdvancedList.AdvancedList.DesignTimeCallback)"/> method. It is not recommended to modify the file.
            <note type="caution">The images from imagelist in <see cref="T:Resco.Controls.AdvancedList.ImageCell"/> are serialized in jpeg format, loosing some of the quality. To prevent serializing images, set the <see cref="P:Resco.Controls.AdvancedList.ImageCell.ImageList"/> property to null before calling this method.</note>
            <note>This method is not supported on Compact Framework.</note></remarks>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> to which the properties are serialized.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.LoadXml(System.String,Resco.Controls.AdvancedList.AdvancedList.DesignTimeCallback)">
            <summary>
            Load the control from the specified <paramref name="location"/>.
            </summary>
            <remarks>You can use filename or any other valid URI as the <paramref name="location"/>.The control properties are set and new templates are loaded from the file created by the <see cref="M:Resco.Controls.AdvancedList.AdvancedList.SaveXml(System.String)"/> method. It is not recommended to change the file manualy.</remarks>
            <param name="location">Location where the XML representation of control is stored.</param>
            <param name="dtc">Reserved for design-time support.</param>
            <example>
            The following sample demonstrates how to load the templates in the runtime:
            <sample name="AdvancedList.LoadXml">
        <code lang="Visual Basic"><![CDATA[
Public Sub New()
    MyBase.New()

    'This call is required by the Windows Form Designer.
    InitializeComponent()

    Me.AdvancedList1 = New Resco.Controls.AdvancedList
    Me.AdvancedList1.Bounds = New System.Drawing.Rectangle(0, 22, 240, 240)
    Me.AdvancedList1.LoadXml("\My Documents\Templates\frmCustomers.xml")
    Me.Controls.Add(Me.AdvancedList1)

End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
public FormCustomers()
{
    //This call is required by the Windows Form Designer.
    InitializeComponent();

    this.advancedList1 = new Resco.Controls.AdvancedList();
    this.advancedList1.Bounds = new System.Drawing.Rectangle(0, 22, 240, 240);
    this.advancedList1.LoadXml("\\My Documents\\Templates\\frmCustomers.xml");
    this.Controls.Add(this.advancedList1)
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.LoadXml(System.String)">
            <summary>
            Load the control from the specified <paramref name="location"/>.
            </summary>
            <remarks>You can use filename or any other valid URI as the <paramref name="location"/>.The control properties are set and new templates are loaded from the file created by the <see cref="M:Resco.Controls.AdvancedList.AdvancedList.SaveXml(System.String)"/> method. It is not recommended to change the file manualy.</remarks>
            <param name="location">Location where the XML representation of control is stored.</param>
            <example>
            The following sample demonstrates how to load the templates in the runtime:
            <sample name="AdvancedList.LoadXml">
        <code lang="Visual Basic"><![CDATA[
Public Sub New()
    MyBase.New()

    'This call is required by the Windows Form Designer.
    InitializeComponent()

    Me.AdvancedList1 = New Resco.Controls.AdvancedList
    Me.AdvancedList1.Bounds = New System.Drawing.Rectangle(0, 22, 240, 240)
    Me.AdvancedList1.LoadXml("\My Documents\Templates\frmCustomers.xml")
    Me.Controls.Add(Me.AdvancedList1)

End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
public FormCustomers()
{
    //This call is required by the Windows Form Designer.
    InitializeComponent();

    this.advancedList1 = new Resco.Controls.AdvancedList();
    this.advancedList1.Bounds = new System.Drawing.Rectangle(0, 22, 240, 240);
    this.advancedList1.LoadXml("\\My Documents\\Templates\\frmCustomers.xml");
    this.Controls.Add(this.advancedList1)
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.LoadXml(System.Xml.XmlReader)">
            <summary>
            Load the control from the specified  <paramref name="reader"/>.
            </summary>
            <remarks>The control properties are set and new templates are loaded from the file created by the <see cref="M:Resco.Controls.AdvancedList.AdvancedList.SaveXml(System.String)"/> method. It is not recommended to change the file manualy.</remarks>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> with the control parameters.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.NextSelectableCell">
            <summary>
            Move to the next selectable cell.
            </summary>
            <remarks>
            Changes the actual <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedCell"/> property to the next selectable cell. If currently selected cell is
            the last cell in the collection, sets SelectedCell to null which deselects all the cells.
            </remarks>
            <returns>True, if next selectable cell existed, false otherwise.</returns>
            <seealso cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedCell"/>
            <seealso cref="M:Resco.Controls.AdvancedList.AdvancedList.PreviousSelectableCell"/>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.PreviousSelectableCell">
            <summary>
            Moves to previous selectable cell.
            </summary>
            <remarks>
            Changes the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedCell"/> property to the previous selectable cell. 
            If currently selected cell is the first selectable cell in the collection, sets SelectedCell 
            to null which deselects all the cells. If no cell is selected (SelectedCell returns null), 
            function selects the last selectable cell in the collection.
            </remarks>
            <returns>True, if previous selectable cell existed, false otherwise.</returns>
            <seealso cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedCell"/>
            <seealso cref="M:Resco.Controls.AdvancedList.AdvancedList.NextSelectableCell"/>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="e">Arguments of the key event handler</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnRowEntered(Resco.Controls.AdvancedList.RowEnteredEventArgs)">
            <summary>
            Fires the RowEntered event.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnCellEntered(Resco.Controls.AdvancedList.CellEnteredMainEventArgs)">
            <summary>
            Fires the CellEntered event.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnCustomizeCell(Resco.Controls.AdvancedList.CustomizeCellEventArgs)">
            <summary>
            Fires the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.CustomizeCell"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnRowAdding(Resco.Controls.AdvancedList.RowAddingEventArgs)">
            <summary>
            Fires the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowAdding"/> event.
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.AdvancedList.OnDataLoaded(Resco.Controls.AdvancedList.DataLoadedEventArgs)">
            <summary>
            Fires the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.DataLoaded"/> event.
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.KeyNavigation">
            <summary>
            Enable or disable internal keyboard navigation.
            </summary>
            <remarks>
            If KeyNavigation is enabled, user can use the arrow up and down keys to change the active row.
            If there are any selectable cells in the currently active row, the user can use the arrow left and
            right keys to select those cells. You can get the index of currently selected cell from
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedCell"/> property.
            Note that KeyNavigation only works, if <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectionMode"/> is set to <c>SelectOnly</c>
            and <see cref="P:Resco.Controls.AdvancedList.AdvancedList.MultiSelect"/> is turned off.
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.DataRows">
            <summary>
            Gets the <see cref="T:Resco.Controls.AdvancedList.RowCollection"/> containing displayed rows.
            </summary>
            <remarks/>
            <value>The <see cref="T:Resco.Controls.AdvancedList.RowCollection"/> containing displayed rows.</value>
            <seealso cref="T:Resco.Controls.AdvancedList.RowCollection"/>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ScrollbarWidth">
            <summary>
            Gets or sets the width of the scrollbar.
            </summary>
            <value>The width of the scrollbar.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ScrollbarSmallChange">
            <summary>
            Gets or sets the SmallChange of the scrollbar.
            </summary>
            <value>The SmallChange of the scrollbar.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.VScrollBar">
            <summary>
            Gets the vertical scrollbar
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.GridLines">
            <summary>
            Gets or sets whether to display gridlines.
            </summary>
            <value>true to display gridlines, false otherwise.</value>
            <remarks>Gridlines are the separating lines between the diplayed rows with height of 1 pixel.
            Color of gridlines is determined by the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.GridColor"/> property.
            You can use the <see cref="T:Resco.Controls.AdvancedList.SeparatorCell"/> instead of gridlines, or if you want 
            gridlines for some rows only.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.GridColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the gridlines.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the gridlines.</value>
            <remarks>Gridlines are the separating lines between the diplayed rows with height of 1 pixel.
            Gridlines are displayed only if the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.GridLines"/> property is set to true.
            You can use the <see cref="T:Resco.Controls.AdvancedList.SeparatorCell"/> instead of gridlines, or if you want 
            gridlines for some rows only.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.RightToLeft">
            <summary>
            Gets or sets a value indicating whether control's elements are aligned to support right-to-left locales.
            </summary>
            <value><b>true</b> to support right-to-left locales, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.Templates">
            <summary>
            Gets or sets the current template set.
            </summary>
            <value>The <see cref="T:Resco.Controls.AdvancedList.TemplateSet"/> containing currently used templates.</value>
            <remarks><p><see cref="T:Resco.Controls.AdvancedList.TemplateSet"/> is the collection of <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/>s. 
            The <see cref="P:Resco.Controls.AdvancedList.Row.TemplateIndex"/> and <see cref="P:Resco.Controls.AdvancedList.Row.SelectedTemplateIndex"/> are 
            the indices to this template set, using the <see cref="P:Resco.Controls.AdvancedList.RowTemplate.Default"/> template, 
            when incorrect index is used.</p>
            <p>You can have prepared more template sets for different occassions, and change the 
            look of the AdvancedList by simply swapping the template sets without changing 
            the indices in each <see cref="T:Resco.Controls.AdvancedList.Row"/>.</p>
            </remarks>
            <example>
            <sample name="Templates">
        <code lang="Visual Basic"><![CDATA[
Private Sub SimpleCheck_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs)_
 Handles SimpleCheck.CheckedChanged
    ' we will switch the templates from simple to graphical
    If SimpleCheck.Checked Then
        AdvancedList1.Templates = SimpleTemplateSet
    Else
        AdvancedList1.Templates = GraphicalTemplateSet
    EndIf
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
private void SimpleCheck_CheckedChanged(object sender, EventArgs e)
{
    // we will switch the templates from simple to graphical
    if (SimpleCheck.Checked)
        advancedList1.Templates = simpleTemplateSet;
    else
        advancedList1.Templates = graphicalTemplateSet;
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.BackColor">
            <summary>
            Gets or sets the background <see cref="T:System.Drawing.Color"/> of a control.
            </summary>
            <remarks>This color is used to fill the remaining space after the last row.</remarks>
            <value>The background <see cref="T:System.Drawing.Color"/> of a control.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.GradientBackColor">
            <summary>
            Get or sets the gradient back color.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.BackgroundImage">
            <summary>
            Gets or sets the background image of AdvancedList.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.DataConnector">
            <summary>
            Gets or sets the <see cref="T:Resco.Controls.AdvancedList.IDataConnector"/> which can be used to load the data.
            </summary>
            <remarks>If <see langword="null"/> is set as a DataConnector, the property will reset
            to standard <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DbConnector"/>, otherwise the new provided conenctor is used.
            <note type="caution">The use of this property is for extensibility purpose only and is
            not fully supported yet.</note>
            </remarks>
            <seealso cref="T:Resco.Controls.AdvancedList.IDataConnector"/>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.DbConnector">
            <summary>
            Gets the <see cref="!:Resco.Controls.DbConnector"/> which is defaultly used to load the data.
            </summary>
            <value>The <see cref="!:Resco.Controls.DbConnector"/> which is defaultly used to load the data.</value>
            <remarks>
            <p>The default connector is used, if no other <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DataConnector"/> 
            is provided.</p>
            <p>By default, the DbConnector is used to connect to SqlServerCe database. If command text
            or connection string is set, new SqlCeCommand and SqlCeConnection, or the 
            <see cref="!:Resco.Controls.DataConnector.Command"/> property is accessed, the command is created within 
            the connector. If you want to use other type of access (e.g. Sql direct), you must create 
            the object with the <see cref="T:System.Data.IDbCommand"/> interface (SqlCommand) with the Connection set.
            </p>
            <p>DbConnector exposes property <see cref="!:Resco.Controls.DataConnector.Command"/>, which can be used to 
            manipulate with the command. It is exposed only as <see cref="T:System.Data.IDbCommand"/>, so you have
            to convert the type to used command (e.g. SqlCeCommand) or use just 
            the <see cref="T:System.Data.IDbCommand"/> properties and methods. This is suitable for e.g. setting existing
            open connection to command, or manipulating the parameters of the command (see example).
            </p>
            </remarks>
            <seealso cref="!:Resco.Controls.DbConnector"/>
            <example>
            This example shows the advanced usage of the DbConnector:
            <sample name="DbConnectorParameters">
        <code lang="Visual Basic"><![CDATA[
Sub GetFilteredData(ByVal strFilter As String)

    Dim myParam As SqlCeParameter
    AdvancedList1.DataRows.Clear()
    
    ' we set the existing open connection to the command
    AdvancedList1.DbConnector.Command.Connection = myDatabase.myConnection
    
    ' we can use shortcut property to set the command text
    advancedList1.DbConnector.CommandText = 
        "SELECT * FROM customers WHERE name LIKE ? "
    
    ' we can add also some parameters
    ' we can't use overload:
    '    advancedList1.DbConnector.Command.Parameters.Add("@filter", "%" + strFilter + "%")
    ' because we have access to IDbParameters and not to SqlCeParameters

    myParam = New SqlCeParameter("@filter", "%" + strFilter + "%")
    advancedList1.DbConnector.Command.Parameters.Add(myParam)
       
    ' now we use the connector to load data:
    advancedList1.LoadData()
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
void GetFilteredData(string strFilter)
{
    advancedList1.DataRows.Clear()
    
    // we set the existing open connection to the command
    advancedList1.DbConnector.Command.Connection = myDatabase.myConnection;
    
    // we can use shortcut property to set the command text
    advancedList1.DbConnector.CommandText = 
        "SELECT * FROM customers WHERE name LIKE ? ";
    
    // we can add also some parameters
    // we can't use overload:
    //    advancedList1.DbConnector.Command.Parameters.Add("@filter", "%" + strFilter + "%");
    // because we have access to IDbParameters and not to SqlCeParameters

    SqlCeParameter myParam = new SqlCeParameter("@filter", "%" + strFilter + "%");
    advancedList1.DbConnector.Command.Parameters.Add(myParam);
       
    // now we use the connector to load data:
    advancedList1.LoadData();
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.SelectedCell">
            <summary>
            Gets or sets the cell that is selected within the currently selected row's RowTemplate.
            </summary>
            <remarks>
            Setting this property to null means that no cell is selected.
            If you set this property to a cell that is not selectable or that cell does not belong to currently
            selected row's RowTemplate's CellCollection, an ArgumentException is thrown.
            </remarks>
            <seealso cref="M:Resco.Controls.AdvancedList.AdvancedList.NextSelectableCell"/>
            <seealso cref="M:Resco.Controls.AdvancedList.AdvancedList.PreviousSelectableCell"/>
            <see cref="P:Resco.Controls.AdvancedList.Cell.Selectable"/>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.AutoSelectRow">
            <summary>
            Gets or sets if the row is auto-selected after DataSource set.
            </summary>
            <remarks>If AutoSelectRow is <b>true</b>, then the first row is selected after <see cref="!:DataSurce"/> set, otherwise no row is selected
            and <see cref="P:Resco.Controls.AdvancedList.AdvancedList.ActiveRowIndex"/> will be -1.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ToolTipType">
            <summary>
            Gets or sets how the ToolTip should be drawn in <see cref="T:Resco.Controls.AdvancedList.TextCell"/>.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ToolTipAllCell">
            <summary>
            Gets or sets how the ToolTip should be handled in <see cref="T:Resco.Controls.AdvancedList.TextCell"/>.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.TooltipForeColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the tooltip fore color.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the tooltip fore color.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.TooltipBackColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the tooltip back color.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the tooltip back color.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.SelectionMode">
            <summary>
            Gets or sets the <see cref="T:Resco.Controls.AdvancedList.SelectionMode"/> of a control.
            </summary>
            <value>The <see cref="!:Resco.Controls.SelectionMode"/> of a control. Default value is 
            <see cref="!:Resco.Controls.SelectionMode.SelectOnly"/>.</value>
            <remarks>
            <p>
            If selection mode is set to <see cref="!:Resco.Controls.SelectionMode.SelectOnly"/>, 
            by clicking not selected row, it is selected. When clicking selected row, 
            no action is taken. The <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowSelect"/> event is fired only when selecting the row.
            </p>
            <p>
            If selection mode is set to <see cref="!:Resco.Controls.SelectionMode.SelectDeselect"/>, 
            by clicking not selected row, it is selected. When clicking selected row, 
            it is deselected. By both actions, the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowSelect"/> event is fired.
            </p>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.MultiSelect">
            <summary>
            Gets or sets whether the control supports multiple rows selection.
            </summary>
            <value>true if the control supports supports the multiple selection, 
            false if only one row at a time is selected.</value>
            <remarks><p>When multiple selection is allowed, more rows can be in the 
            <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/> state.
            Otherwise, when one row is selected and other is clicked, the first row is deselected 
            and then the new row is selected. No event is fired for the deselection of the row when
            other is selected.</p>
            <p>When the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.MultiSelect"/> property is changed, the current selection is reset
            (no row selected).</p>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ScrollbarVisible">
            <summary>
            Gets the scrollbar visibility.
            </summary>
            <value>true if the scrollbar is displayed, false otherwise.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ShowScrollbar">
            <summary>
            Gets or sets whether the scrollbar should be visible or always hidden.
            </summary>
            <value>true if the scrollbar should be visible, false otherwise</value>
            <remarks>Default value is true, the scrollbar is visible when needed.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.SelectedRows">
            <summary>
            Gets the array of selected rows.
            </summary>
            <value>The array of selected rows.</value>
            <remarks>Getting this array is time consuming, the value is not cached.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.SelectedRow">
            <summary>
            Gets or sets the selected row.
            </summary>
            <value>The selected row.</value>
            <remarks>
            <p>When <see cref="P:Resco.Controls.AdvancedList.AdvancedList.MultiSelect"/> property is set to true, gets the first selected row.</p>
            <p>
            When the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedRow"/> property is setthe Row is set as SelectedRow, 
            the control will call <see cref="M:Resco.Controls.AdvancedList.AdvancedList.EnsureVisible(Resco.Controls.AdvancedList.Row)"/> method on that row and 
            simulate the selection by the user click (with <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowSelect"/> event fired).
            If you don't want this extended behavior, you can just set the <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/> 
            property to true.
            </p>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ActiveRowIndex">
            <summary>
            Gets or sets the active row index.
            </summary>
            <remarks>Active row is the row that was last selected.</remarks>
            <example>
            The following sample demonstrates how to utilize keys in navigation:
            <sample name="AdvancedList.KeyNavigation">
        <code lang="Visual Basic"><![CDATA[
Private Sub AdvancedList1_KeyDown(ByVal sender As Object, _
    ByVal e As System.Windows.Forms.KeyEventArgs) Handles AdvancedList1.KeyDown
    
    If e.KeyCode = Keys.Up Then
        AdvancedList1.ActiveRowIndex = AdvancedList1.ActiveRowIndex - 1
    Else If e.KeyCode = Keys.Down Then
        AdvancedList1.ActiveRowIndex = AdvancedList1.ActiveRowIndex + 1
    End If
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
private void advancedList1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
{
    if (e.KeyCode == Keys.Up)
        advancedList1.ActiveRowIndex--;
    else if (e.KeyCode == Keys.Down)
        advancedList1.ActiveRowIndex++;
}
            ]]></code>
    </sample>
            </example>
            <value>The active row index, or -1 if none is active.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.TopRowIndex">
            <summary>
            Gets the index of the top row (first partialy displayed).
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.TopRowOffset">
            <summary>
            Gets the offset of the top row (negative value).
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.SelectedCellIndex">
            <summary>
            Index of the currently selected cell
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ContextMenu">
            <summary>
            Gets or sets the shortcut menu associated with the control.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.ContextMenu"/> that represents 
            the shortcut menu associated with the control.</value>
            <remarks><p>Behavior of the context menu is changed due to tooltips.</p>
            <p>It is preferred to use Links instead of context menu as the navigation is faster. 
            If you need to display context sensitive context menu, use <see cref="M:Resco.Controls.AdvancedList.AdvancedList.GetCellAtPoint(System.Drawing.Point)"/> 
            point method to determine where context menu was displayed (see sample bellow).</p></remarks>
            <example>
            <sample name="AdvancedList.ContextMenu">
        <code lang="Visual Basic"><![CDATA[
Private Sub ContextMenu1_Popup(ByVal sender As Object, _
    ByVal e As System.EventArgs) Handles ContextMenu1.Popup
    
    Dim pt As System.Drawing.Point
    Dim cea As Resco.Controls.CellEventArgs 
    
    pt = AdvancedList1.PointToClient(AdvancedList1.MousePosition)
    cea = AdvancedList1.GetCellAtPoint(pt)
    
    If Not cea Is Nothing Then
		ContextMenu1.MenuItems(0).Text = cea.Row("Menu")
    End If
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
private void contextMenu1_Popup(object sender, System.EventArgs e)
{
    System.Drawing.Point			pt;
    Resco.Controls.CellEventArgs	cea; 	
    
    pt = advancedList1.PointToClient(advancedList1.MousePosition);
    cea = advancedList1.GetCellAtPoint(pt);
    
    if (cea != null)
    {
		contextMenu1.MenuItems[0].Text = cea.Row["Menu"];
	}
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ScrollbarOverlap">
            <summary>
            Gets or sets whether the scrollbar have to overlap header and footer.
            </summary>
            <value>true if the scrollbar overlap header and footer, false otherwise</value>
            <remarks>Default value is true, the scrollbar overlap header and footer.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ShowHeader">
            <summary>
            Gets or sets whether the header row is shown in the top of the control.
            </summary>
            <value>true if the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.HeaderRow"/> is displayed, false otherwise</value>
            <remarks>Default value is false, the header is not displayed. 
            Header does not scroll with the rest of the rows and does not support selection.
            Clicking the <see cref="T:Resco.Controls.AdvancedList.Cell"/> in header row generates special <see cref="E:Resco.Controls.AdvancedList.AdvancedList.HeaderClick"/>
            event.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ShowFooter">
            <summary>
            Gets or sets whether the header row is shown in the top of the control.
            </summary>
            <value>true if the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.HeaderRow"/> is displayed, false otherwise</value>
            <remarks>Default value is false, the header is not displayed. 
            Header does not scroll with the rest of the rows and does not support selection.
            Clicking the <see cref="T:Resco.Controls.AdvancedList.Cell"/> in header row generates special <see cref="E:Resco.Controls.AdvancedList.AdvancedList.HeaderClick"/>
            event.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.HeaderRow">
            <summary>
            Gets or sets the header row.
            </summary>
            <value><see cref="!:Resco.Controls.HeaderRow"/> to be displayed.</value>
            <remarks>Header row is displayed if the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.ShowHeader"/> property is set to true.
            Header does not scroll with the rest of the rows and does not support selection.
            Clicking the <see cref="T:Resco.Controls.AdvancedList.Cell"/> in header row generates special <see cref="E:Resco.Controls.AdvancedList.AdvancedList.HeaderClick"/>
            event.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.FooterRow">
            <summary>
            Gets or sets the header row.
            </summary>
            <value><see cref="!:Resco.Controls.HeaderRow"/> to be displayed.</value>
            <remarks>Header row is displayed if the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.ShowHeader"/> property is set to true.
            Header does not scroll with the rest of the rows and does not support selection.
            Clicking the <see cref="T:Resco.Controls.AdvancedList.Cell"/> in header row generates special <see cref="E:Resco.Controls.AdvancedList.AdvancedList.HeaderClick"/>
            event.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.HeaderHeight">
            <summary>
            Gets the height of the header (with gridline).
            </summary>
            <value>The height of the header (with gridline).</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.FooterHeight">
            <summary>
            Gets the height of the header (with gridline).
            </summary>
            <value>The height of the header (with gridline).</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.BackBuffer">
            <summary>
            Gets the backbuffer <see cref="T:System.Drawing.Graphics"/> to draw on.
            </summary>
            <value>The <see cref="T:System.Drawing.Graphics"/> to draw on.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.GridLinesWidth">
            <summary>
            Gets the current width of the gridlines
            </summary>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.RowAdding">
            <summary>
            Occurs when a new Row should be provided for AdvancedList's RowCollection.
            </summary>
            <remarks>
            Once you call the <see cref="M:Resco.Controls.AdvancedList.AdvancedList.LoadDataManually"/> method, AdvancedList fires this event
            regularly for you to provide it a <see cref="T:Resco.Controls.AdvancedList.Row"/> object filled with data. The arguments for this event
            is derived from CancelEventArgs. You have to set the Cancel property in the event handler to true to stop
            loading more data.
            If <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DelayLoad"/> is set to true, the event stops firing as soon as the rows
            fill up AdvancedList's client area. However, as soon as the user scrolls down to see more rows, 
            the event starts firing again for the user to provide additional <see cref="T:Resco.Controls.AdvancedList.Row"/> objects to be added
            into the RowCollection.
            </remarks>
            <seealso cref="M:Resco.Controls.AdvancedList.AdvancedList.LoadDataManually"/>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.LinkClick">
            <summary>
            Occurs when the link in the control is clicked.
            </summary>
            <remarks><p>Occurs when the link in the control is clicked. When the user clicks on 
            the link, LinkClick event will occur instead of other actions, like selecting the row
            or clicking the cell. LinkClick event can occur also in rows, that are not selected,
            without selecting the row.</p>
            <p>LinkClick event has arguments of type <see cref="T:Resco.Controls.AdvancedList.LinkEventArgs"/>.</p></remarks>
            <example>
            <p>LinkClick event is used to invoke the internet explorer to display the home page of the 
            customer, or to send email:</p>
            <sample name="LinkClick">
        <code lang="Visual Basic"><![CDATA[
Private Sub AdvancedList1_LinkClick(ByVal sender As Object, ByVal e As Resco.Controls.LinkEventArgs)_
 Handles AdvancedList1.LinkClick
    ' Handle the link click event
    If e.DataRow.CurrentTemplateIndex = 2 Then
        Select Case e.CellIndex
            Case 8 ' E-mail
                ' Run New Message dialog
                CreateProcess("iexplore", "MailTo:" & e.Target, IntPtr.Zero, IntPtr.Zero, _
                               False, 0, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero)

            Case 10 ' Web address
                ' Run Internet Explorer
                CreateProcess("iexplore", e.Target, IntPtr.Zero, IntPtr.Zero, False, 0, _
                               IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero)

        End Select
    End If
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
private void advancedList1_LinkClick(object sender, Resco.Controls.LinkEventArgs e)
{
    // Handle the cell click event, in this case we check 
    // whether the shopping cart ImageCell was clicked
    if (e.DataRow.CurrentTemplateIndex == 2)
    {
        switch (e.CellIndex)
        {
            case 8: 
                // E-mail
                // Run New Message dialog
            
                CreateProcess("iexplore", "MailTo:" + e.Target, IntPtr.Zero, IntPtr.Zero, 
                               false, 0, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero);
                break;

            case 10: 
                // Web address
                // Run Internet Explorer
            
                CreateProcess("iexplore", e.Target, IntPtr.Zero, IntPtr.Zero, false, 0, 
                               IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero);
                break;

        }
    }
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.ButtonClick">
            <summary>
            Occurs when the button in the control is clicked.
            </summary>
            <remarks><p>Occurs when the button in the control is clicked. When the user clicks 
            the button, ButtonClick event will occur instead of other actions, like selecting the row
            or clicking the cell. ButtonClick event can occur also in rows, that are not selected,
            without selecting the row.</p>
            <p>ButtonClick event has arguments of type <see cref="!:ButtonEventArgs"/>.</p></remarks>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.CellClick">
            <summary>
            Occurs when the cell in the selected row of the control is clicked.
            </summary>
            <remarks><p>Occurs when the cell in the row of the control is clicked. When row is
            not selected, the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.CellClick"/> event will not occur. If 
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectionMode"/> is <c>SelectionMode.SelectDeselect</c>, the 
            CellClick event is not invoked (the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowSelect"/> event has priority,
            because the cells can be different in selected/normal template).</p>
            <p>CellClick event has arguments of type <see cref="T:Resco.Controls.AdvancedList.CellEventArgs"/>.</p></remarks>
            <example>
            <p>CellClick event is used to invoke the order form, 
            when image cell with the picture of shopping cart is clicked:</p>
            <sample name="CellClick">
        <code lang="Visual Basic"><![CDATA[
Private Sub AdvancedList1_CellClick(ByVal sender As Object, ByVal e As Resco.Controls.CellEventArgs)_
 Handles AdvancedList1.CellClick
    ' Handle the cell click event, in this case we check 
    ' whether the shopping cart ImageCell was clicked
    If e.DataRow.CurrentTemplateIndex = 2 Then
        Select Case e.CellIndex
            Case 1 ' Shopping cart
                OrderForm.Show(e.DataRow["id"])
        End Select
    End If
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
private void advancedList1_CellClick(object sender, Resco.Controls.CellEventArgs e)
{
    // Handle the cell click event, in this case we check 
    // whether the shopping cart ImageCell was clicked
    if (e.DataRow.CurrentTemplateIndex == 2)
    {
        switch (e.CellIndex)
        {
            case 1: // Shopping cart
                OrderForm.Show(e.DataRow["id"]);
                break;
        }
    }
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.CellEntered">
            <summary>
            Occurs if either mouse is clicked on a selectable cell or if <see cref="P:Resco.Controls.AdvancedList.AdvancedList.KeyNavigation"/>
            is set to true and Enter key is pressed while a cell is selected.
            <seealso cref="!:AdvancedList.CellEnteredMainEventHandler"/>
            <seealso cref="!:AdvancedList.CellEnteredMainEventArgs"/>
            </summary>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.CustomizeCell">
            <summary>
            CustomizeCell event is used to allow more advanced cell customization.
            </summary>
            <remarks>
            <p>This event allows you to modify cells.
            To allow this event for the given cell, set <see cref="P:Resco.Controls.AdvancedList.Cell.CustomizeCell"/> 
            to <c>true</c>.</p>
            <p>Arguments for this event are of type <see cref="T:Resco.Controls.AdvancedList.CustomizeCellEventArgs"/>.</p> 
            </remarks>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.HeaderClick">
            <summary>
            Occurs when the cell in the header row of the control is clicked.
            </summary>
            <remarks>HeaderClick event has arguments of type <see cref="T:Resco.Controls.AdvancedList.CellEventArgs"/>.</remarks>
            <example>
            <p>HeaderClick event can be used e.g. for sorting the rows. Simple example:</p>
            <sample name="AdvancedList.Reload">
        <code lang="Visual Basic"><![CDATA[
Private Sub AdvancedList1_HeaderClick(ByVal sender As Object, _
        ByVal e As Resco.Controls.CellEventArgs) Handles AdvancedList1.HeaderClick
    Dim orderBy As String

    Select Case e.CellIndex
        Case 0 ' Sort ascending
            orderBy = " ORDER BY name ASC"
        Case 1 ' Sort descending
            orderBy = " ORDER BY name DESC"
    End Select

    If Not orderBy Is Nothing Then
        ' Update command text and reload the data
        AdvancedList1.DbConnector.CommandText = "SELECT * FROM customers" & orderBy
        AdvancedList1.Reload()
    End If
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
private void advancedList1_HeaderClick(object sender, Resco.Controls.CellEventArgs e)
{
    string orderBy = null;
    if (e.CellIndex == 0)
        orderBy = " ORDER BY name ASC";
    else if (e.CellIndex == 1)
        orderBy = " ORDER BY name DESC";
    if (orderBy != null)
    {
        // Update command text and reload the data
        advancedList1.DbConnector.CommandText = "SELECT * FROM customers" + orderBy;
        advancedList1.Reload();
    }
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.FooterClick">
            <summary>
            Occurs when the cell in the footer row of the control is clicked.
            </summary>
            <remarks>FooterClick event has arguments of type <see cref="T:Resco.Controls.AdvancedList.CellEventArgs"/>.</remarks>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.RowSelect">
            <summary>
            Occurs when the row in the control is selected or deselected. by click or by 
            setting the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedRow"/> property.
            </summary>
            <remarks>
            <p>Occurs when the row in the control is selected  by click or by 
            setting the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedRow"/> property. When <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectionMode"/> is set to 
            <c>SelectionMode.SelectDeselect</c>, the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowSelect"/> event is fired also 
            when deselecting the row by click. RowSelect event is not fired, when deselecting the row
            automatically, when <see cref="P:Resco.Controls.AdvancedList.AdvancedList.MultiSelect"/> is false. RowSelect is not fired, when using 
            the <see cref="P:Resco.Controls.AdvancedList.Row.Selected"/> property of the row.</p>
            <p>RowSelect event has arguments of type <see cref="T:Resco.Controls.AdvancedList.RowEventArgs"/>.</p></remarks>
            <example>
            <p>RowSelect event is used to load or unload the child detail rows for the selected/deselected
            parent row:</p>
            <sample name="RowSelect">
        <code lang="Visual Basic"><![CDATA[
Private Sub AdvancedList1_RowSelect(ByVal sender As Object, ByVal e As Resco.Controls.RowEventArgs)_
 Handles AdvancedList1.RowSelect

    ' we handle the RowSelect event, which is fired at selection/deselection 
    ' (in case of SelectionMode.SelectDeselect) of the row

    Cursor.Current = Cursors.WaitCursor

    Select Case e.DataRow.CurrentTemplateIndex
        Case 1 ' The master row has to be collapsed
            RemoveDetails(e.RowIndex)

        Case 2 ' The master row has to be expanded
            InsertDetails(e.RowIndex, e.DataRow("OrderID"))

            'Otherwise the detail row was (de)selected, do nothing
    End Select

    Cursor.Current = Cursors.Default

End Sub

            ]]></code>
        <code lang="C#"><![CDATA[
private void advancedList1_RowSelect(object sender, Resco.Controls.RowEventArgs e)
{
    // we handle the RowSelect event, which is fired at selection/deselection 
    // (in case of SelectionMode.SelectDeselect) of the row

    Cursor.Current = Cursors.WaitCursor;

    // We use CurrentTemplateIndex to determine the action
    switch (e.DataRow.CurrentTemplateIndex)
    {
        case 1: // The master row has to be collapsed
            RemoveDetails(e.RowIndex);
            break;

        case 2: // The master row has to be expanded
            InsertDetails(e.RowIndex, (int) e.DataRow["OrderID"]);
            break;

        default: // The detail row was (de)selected, do nothing
            break;
    }

    Cursor.Current = Cursors.Default;
}

            ]]></code>
    </sample>
            </example>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.ValidateData">
            <summary>
            Occurs after the row is loaded from <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DbConnector"/> 
            and before the row is added to <see cref="T:Resco.Controls.AdvancedList.RowCollection"/>.
            </summary>
            <remarks>Validate data event is usefull for custom data processing. 
            It has the arguments of type <see cref="T:Resco.Controls.AdvancedList.ValidateDataArgs"/>.</remarks>
            <seealso cref="T:Resco.Controls.AdvancedList.ValidateDataArgs"/>
            <example>
            <sample name="ValidateData">
        <code lang="Visual Basic"><![CDATA[
Private Sub AdvancedList1_ValidateData(ByVal sender As Object, ByVal e As Resco.Controls.ValidateDataArgs)_
 Handles AdvancedList1.ValidateData
    ' we will use the validate data handler to set the flags and background 
    ' for the customer preview or details
    
    Select Case e.DataRow("Country")
        Case "UK"
            e.DataRow("Flag") = 18
            e.DataRow("Background") = 0
        Case "USA"
            e.DataRow("Flag") = 19
            e.DataRow("Background") = 1
    End Select
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
private void AdvancedList1_ValidateData(object sender, Resco.Controls.ValidateDataArgs e)
{
    // we will use the validate data handler to set the flags and background 
    // for the customer preview or details
    
    switch ((string)e.DataRow["Country"])
    {
        case "UK":
            e.DataRow["Flag"] = 18;
            e.DataRow["Background"] = 0;
            break;
        case "USA":
            e.DataRow["Flag"] = 19;
            e.DataRow["Background"] = 1;
            break;
    }
}
            ]]></code>
    </sample>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Resco.Controls.AdvancedList.AdvancedList.DataLoaded" -->
        <!-- Badly formed XML comment ignored for member "E:Resco.Controls.AdvancedList.AdvancedList.Scroll" -->
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.ActiveRowChanged">
            <summary>
            Occurs when the ActiveRowIndex property has changed.
            </summary>
            <remarks><see cref="P:Resco.Controls.AdvancedList.AdvancedList.ActiveRowIndex"/> property changes either programatically or when the new row is selected or the active row is deselected.</remarks>
        </member>
        <member name="E:Resco.Controls.AdvancedList.AdvancedList.RowEntered">
            <summary>
            Occurs when Enter key was pressed on an active row.
            </summary>
            <remarks>
            These conditions must be met for this event to occur:
            <list type="bullet">
            <item>
            <term><see cref="P:Resco.Controls.AdvancedList.AdvancedList.KeyNavigation"/></term><description> must be set to true</description>
            </item>
            <item>
            <term><see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectionMode"/></term><description> must be set to 
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectionMode"/>.SelectOnly</description>
            </item>
            <item><description>Enter key must be pressed while a row is active.</description></item>
            </list>
            </remarks>
            <seealso cref="!:AdvancedList.RowEnteredEventArgs"/>
            <seealso cref="!:AdvancedList.RowEnteredEventHandler"/>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.TemplateIndex">
            <summary>
            Gets or sets the template index used for loaded data.
            </summary>
            <value>Template index, default value is 0.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.SelectedTemplateIndex">
            <summary>
            Gets or sets the selected template index used for loaded data.
            </summary>
            <value>Selected template index, default value is 0.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.ActiveTemplateIndex">
            <summary>
            Gets or sets the active template index used for loaded data.
            </summary>
            <value>Active template index, default value is 0.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.AlternateTemplateIndex">
            <summary>
            Gets or sets the alternating template index used for loaded data.
            </summary>
            <value>Alternating template index, default value is -1.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.DelayLoad">
            <summary>
            Gets or sets the delay load option.
            </summary>
            <value>true, if delay load is applied, false otherwise.</value>
            <remarks><p>If delay load is applied, only partial data are loaded from 
            DataConnector, and new data are added only if user scrolls the control.
            Otherwise all the data are loaded and DataConnector is closed. 
            The number of loaded data is determined by the page size.</p>
            <p>When DbConnector is open, setting the DelayLoad property to false
            will load the remaing data. To avoid it, use <see cref="M:Resco.Controls.AdvancedList.AdvancedList.CloseConnector"/> function.</p></remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.AutoBinding">
            <summary>
            Allows the automatic databinding.
            </summary>
            <remarks>Use this property, if you want to allow automatic databinding to the same datasource using <see cref="T:System.Windows.Forms.CurrencyManager"/>. <see cref="P:System.Windows.Forms.CurrencyManager.Position"/> is synchronized with the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.ActiveRowIndex"/>. If <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DataSource"/> is <see langword="null"/>, then you can bind to the DataRows property, otherwise use the DataSource property.
            <note>If DataSource is set, the control is automatically databound, and AutoBinding property is not required.</note></remarks>
            <value><c>true</c> if databinding is enabled, <c>false</c> otherwise</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.AdvancedList.DataSource">
            <summary>
            Gets or sets the data source displayed by the AdvancedList.
            </summary>
            <value>An object that implements the <see cref="T:System.Collections.IList"/> interface, such as a <see cref="T:System.Data.DataTable"/> or an <see cref="T:System.Array"/>. The default is a null reference (Nothing in Visual Basic).</value>
            <remarks><p>For the given DataSource one common <see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/> is created, that can be used to identify the rows from the same source. For each item in the datasource, proper <see cref="T:Resco.Controls.AdvancedList.BoundRow"/> is created and added to the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DataRows"/> collection. If the underlying list supports notifications, any change of the underlying datasource is reflected in the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DataRows"/> collection.</p>
            <p>When the DataSource property is set, or the item is added to the underlying datasource, the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.TemplateIndex"/> and <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedTemplateIndex"/> properties of AdvancedList are used as template indices of inserted <see cref="T:Resco.Controls.AdvancedList.BoundRow"/>. You can change them in the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.ValidateData"/> event handler.</p>
            </remarks>
            <note>It is not recommended to combine using the DataSource property and other ways of filling the AdvancedList.</note>
        </member>
        <member name="T:Resco.Controls.AdvancedList.Cell">
            <summary>
            Cell is the basic cell from which other cell types are derived.
            </summary>   
            <remarks>
            <p>The Cell is the basic building block of <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/>. Cell has defined 
            <see cref="P:Resco.Controls.AdvancedList.Cell.Bounds"/> relative to its owner row template. Around the cell can be drawn 
            <see cref="P:Resco.Controls.AdvancedList.Cell.Border"/>, which is actually one pixel outside of the cell bounds. 
            The Cell has defined <see cref="P:Resco.Controls.AdvancedList.Cell.BackColor"/> for drawing the background and 
            <see cref="P:Resco.Controls.AdvancedList.Cell.ForeColor"/> for drawing the contents. Their default value is 
            <see cref="P:System.Drawing.Color.Transparent"/>, i.e. the actual color is determined by the 
            <see cref="P:Resco.Controls.AdvancedList.RowTemplate.BackColor"/> or <see cref="P:Resco.Controls.AdvancedList.RowTemplate.ForeColor"/> of the owner 
            <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/>.</p>
            <p>Cell is bound to a data from displayed row by the <see cref="P:Resco.Controls.AdvancedList.Cell.CellSource"/>. The actual 
            data can be determined by the indexer <see cref="P:Resco.Controls.AdvancedList.Cell.Item(Resco.Controls.AdvancedList.Row,System.Int32)"/>.</p> 
            <note type="inheritinfo">During the further developement of the AdvancedList control 
            non-public properties and methods can be a subject to change. For the example of derived
            cell see also <seealso cref="M:Resco.Controls.AdvancedList.Cell.#ctor(Resco.Controls.AdvancedList.Cell)">Copy constructor</seealso> and <see cref="P:Resco.Controls.AdvancedList.Cell.CurrentRow"/> property.</note>
            </remarks>  
            <example>
            This sample shows the generated code to create empty cell with desired properties:
            <sample name="Cell">
        <code lang="Visual Basic"><![CDATA[
Dim Cell1 As New Resco.Controls.Cell
Cell1.Border = Resco.Controls.BorderType.Inset
Cell1.BackColor = Color.Blue
Cell1.ForeColor = Color.Yellow
Cell1.Bounds = New System.Drawing.Rectangle(130, 2, 90, 19)
Cell1.CellSource.ColumnName = "Filter"
RowTemplate1.CellTemplates.Add(Cell1)
            ]]></code>
        <code lang="C#"><![CDATA[
Resco.Controls.Cell cell1 = new Resco.Controls.Cell();
cell1.Border = Resco.Controls.BorderType.Inset;
cell1.BackColor = Color.Blue;
cell1.ForeColor = Color.Yellow;
cell1.Bounds = new System.Drawing.Rectangle(130, 2, 90, 19);
cell1.CellSource.ColumnName = "Filter";
rowTemplate1.CellTemplates.Add(cell1);
           ]]></code>
    </sample>
            </example>        
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.#ctor">
            <summary>
            Empty constructor, sets default values.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.#ctor(Resco.Controls.AdvancedList.Cell)">
            <summary>
            Copy constructor, gets values from other cell.
            </summary>
            <param name="cell">Source cell to copy values from.</param>
            <remarks>Use this constructor in derived cell types. You can use 
            the graphical designer to design empty cell and than assign values quickly 
            with this constructor.</remarks>
            <example>
            The following sample demonstrates the usage in the derived cell (C# only):
            <sample name="ButtonCell">
        <code lang="C#"><![CDATA[
class ButtonCell : Resco.Controls.Cell
{
    public ButtonCell(Resco.Controls.Cell c) : base(c)
    {
    }
    public override Resco.Controls.BorderType Border
    {
        get
        {
            if (Convert.ToBoolean(CurrentData))
                return Resco.Controls.BorderType.Inset;
            else
                return Resco.Controls.BorderType.Raised;
        }
    }
}
private void Form1_Load(object sender, System.EventArgs e)
{
    // we have designed empty cell in the designer, it is the first
    // cell in the first row template
    // we will replace it with the custom ButtonCell
    Resco.Controls.RowTemplate t = advancedList1.Templates[0];
    t[0] = new ButtonCell(t[0]);
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.Clone">
            <summary>
            Clones the Cell.
            </summary>
            <remarks>The Cell cannot be used in more then one RowTemplate. 
            Use this method to create the copy of the cell in another template.</remarks>
            <returns>A new Cell with the same properties as the current Cell.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.ToString">
            <summary>
            Returns a String that represents the current Cell.
            </summary>
            <returns>A String that represents the current Cell.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.Draw(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Object,Resco.Controls.AdvancedList.RowSpecificCellProperties)">
            <summary>
            Draws the cell.
            </summary>
            <param name="gr">Drawing surface</param>
            <param name="xOffset">offset of the row from left</param>
            <param name="yOffset">offset of the row from top</param>
            <param name="gridWidth">width of row</param>
            <param name="customHeight">height of cell, pass -1 to let advancedlist calculate height automatically</param>
            <param name="data">data to display</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.GetColor(Resco.Controls.AdvancedList.ColorCategory)">
            <summary>
            Gets the <see cref="T:System.Drawing.Color"/> of selected <see cref="T:Resco.Controls.AdvancedList.ColorCategory"/>, resolves transparency issues.
            </summary>
            <param name="c"><see cref="T:Resco.Controls.AdvancedList.ColorCategory"/> that denotes the <see cref="T:System.Drawing.Color"/>.</param>
            <returns>The actual <see cref="T:System.Drawing.Color"/> of selected <see cref="T:Resco.Controls.AdvancedList.ColorCategory"/>.</returns>
            <remarks>Actual usage of this method is the support for transparent values.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the cell.
            </summary>
            <param name="gr">drawing surface</param>
            <param name="drawbounds">bounds of cell</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.DrawSelection(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws visual representation of selection.
            </summary>
            <param name="gr">drawing surface</param>
            <param name="drawbounds">bounds of cell</param>
            <remarks>
            In case that this cell is selected, this method is used to draw something meaningful into this cell
            to distinguish it from not selected cells.
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.DrawContent(System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Draws the contents of the cell.
            </summary>
            <param name="gr">drawing surface</param>
            <param name="drawbounds">bounds of cell</param>
            <param name="data">data to display</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the border of cell
            </summary>
            <param name="gr">drawing surface</param>
            <param name="drawbounds">bounds of cell</param>
            <remarks>Border is draw outside the <see cref="P:Resco.Controls.AdvancedList.Cell.Bounds"/> of the cell, so you 
            should leave space for it. Border colors are determinded by the <see cref="M:Resco.Controls.AdvancedList.Cell.GetColor(Resco.Controls.AdvancedList.ColorCategory)"/>
            method. Overall look of the border is determined by the <see cref="T:Resco.Controls.AdvancedList.BorderType"/>.
            </remarks>
            <seealso cref="T:Resco.Controls.AdvancedList.BorderType"/>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.GetAutoHeight(Resco.Controls.AdvancedList.Row,System.Int32,Resco.Controls.AdvancedList.RowSpecificCellProperties)">
            <summary>
            Returns the height when displaying the Row with autoheight feature enabled.
            </summary>
            <param name="r">Row with data.</param>
            <param name="index">Index of the cell.</param>
            <returns>Height that will be used to display cell.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.CalculateBounds(System.Int32,System.Int32,Resco.Controls.AdvancedList.Row,System.Int32,Resco.Controls.AdvancedList.RowSpecificCellProperties)">
            <summary>
            Calculates the current bounds of cell, in the row rectangle.
            </summary>
            <param name="xOffset">offset of row from left</param>
            <param name="yOffset">offset of row from top</param>
            <param name="rowHeight">height of row</param>
            <param name="gridWidth">width of row</param>
            <returns>rectangle with actual bounds</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.CalculateCellWidth(System.Int32)">
            <summary>
            Gets the cell width based on grid width.
            </summary>
            <remarks>Calculates the width of cells with -1 width in Bounds.</remarks>
            <param name="gridWidth">The width of the AdvancedList.</param>
            <returns>Recalculated cell width.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.OnCellEntered(Resco.Controls.AdvancedList.CellEnteredEventArgs)">
            <summary>
            Fires the CellEntered event.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.ShouldSerializeBorder">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.Cell.Border"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Cell.OnChanged(System.Object,Resco.Controls.AdvancedList.GridEventArgsType,System.Object)">
            <summary>
            Fires the changed event (for inheritors)
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Cell.CurrentData">
            <summary>
            Contains current data.
            </summary>
            <remarks>Data are considered to be valid only during the duration of the <see cref="M:Resco.Controls.AdvancedList.Cell.Draw(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Object,Resco.Controls.AdvancedList.RowSpecificCellProperties)"/> method.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.Bounds">
            <summary>
            Gets or sets the bounds of a cell relative to displayed row.
            </summary>
            <value>The bounds of a cell relative to displayed row.</value>
            <remarks>-1 in any of the parameters of the <see cref="T:System.Drawing.Rectangle"/> creating bounds 
            will be recalculated after adding to <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/>. If 
            <see cref="P:System.Drawing.Rectangle.Width"/> is set to -1, the actual width remaining to the end of the
             AdvancedList is used, thus allowing the cell to resize the cell when scrollbars 
             visibility is changed.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.BackColor">
            <summary>
            Gets or sets the background color of a cell.
            </summary>
            <value>The background <see cref="T:System.Drawing.Color"/> of a cell, default 
            <see cref="P:System.Drawing.Color.Transparent"/></value>
            <remarks>When the BackColor is <see cref="P:System.Drawing.Color.Transparent"/>, no background is drawn,
            and cell seems transparent.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.ForeColor">
            <summary>
            Gets or sets the foreground color of a cell.
            </summary>
            <value>The foreground <see cref="T:System.Drawing.Color"/> of a cell.</value>
            <remarks>When the ForeColor is <see cref="P:System.Drawing.Color.Transparent"/>, the color for the foreground,
            is taken from the <see cref="P:Resco.Controls.AdvancedList.RowTemplate.ForeColor"/> property of the owner row template.
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.AutoHeight">
            <summary>
            Determines whether cell changes height according to data.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.Owner">
            <summary>
            Gets or sets the RowTemplate, which owns the cell.
            </summary>
            <value>The <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> which is the owner of this Cell.</value>
            <remarks>Cell can be in only one template at a time, use a copy constructor 
            <see cref="M:Resco.Controls.AdvancedList.Cell.#ctor(Resco.Controls.AdvancedList.Cell)"/> to create the Cell with the same properties but without owner.
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.CellSource">
            <summary>
            Gets or sets the CellSource of a Cell.
            </summary>
            <value>The <see cref="P:Resco.Controls.AdvancedList.Cell.CellSource"/> of a Cell.</value>
            <remarks>The <see cref="P:Resco.Controls.AdvancedList.Cell.CellSource"/> is used when getting the data from
            the <see cref="T:Resco.Controls.AdvancedList.Row"/> with the indexer <see cref="P:Resco.Controls.AdvancedList.Cell.Item(Resco.Controls.AdvancedList.Row,System.Int32)"/>.
            </remarks>
            <seealso cref="P:Resco.Controls.AdvancedList.Cell.CellSource"/>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.Item(Resco.Controls.AdvancedList.Row,System.Int32)">
            <summary>
            Gets or sets the data for given cell on given cell index.
            </summary>
            <value>The data from the given <see cref="T:Resco.Controls.AdvancedList.Row"/>, when the cell has the given index.</value>
            <remarks><paramref name="index"/> is used when binding to default data source, with 
            the <see cref="!:Resco.Controls.CellSource.ColumnIndex"/> set to -1. Then the <paramref name="index"/>-th 
            column from the row is taken. Otherwise the source of data are determined by the 
            <see cref="P:Resco.Controls.AdvancedList.Cell.CellSource"/>.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.Anchor">
            <summary>
            Gets or sets the AnchorStyle of a cell.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.AnchorStyles"/> of a cell.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.Border">
            <summary>
            Gets or sets the BorderType of a cell.
            </summary>
            <value>The <see cref="T:Resco.Controls.AdvancedList.BorderType"/> of a cell.</value>
            <example>
            The example (C# only) demonstrates, how overriding this property can be used to create 
            button-like cell. You just need to bind ButtonCell to <see cref="T:System.Boolean"/> value, and 
            changing it changes the appearance of the cell, which can be used as a background to
            e.g. text cell or image cell.
            <sample name="ButtonCell">
        <code lang="C#"><![CDATA[
class ButtonCell : Resco.Controls.Cell
{
    public ButtonCell(Resco.Controls.Cell c) : base(c)
    {
    }
    public override Resco.Controls.BorderType Border
    {
        get
        {
            if (Convert.ToBoolean(CurrentData))
                return Resco.Controls.BorderType.Inset;
            else
                return Resco.Controls.BorderType.Raised;
        }
    }
}
private void Form1_Load(object sender, System.EventArgs e)
{
    // we have designed empty cell in the designer, it is the first
    // cell in the first row template
    // we will replace it with the custom ButtonCell
    Resco.Controls.RowTemplate t = advancedList1.Templates[0];
    t[0] = new ButtonCell(t[0]);
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.CustomizeCell">
            <summary>
            Gets or sets the boolean value indicating whether cells can be customized during drawing of AdvancedList.
            </summary>
            <value><b>true</b> enable cell customization, otherwise <b>false</b>.</value>
            <remarks>If <c>CustomizeCell</c> is set to true, then <see cref="E:Resco.Controls.AdvancedList.AdvancedList.CustomizeCell"/>
            event is called when cell has to be displayed.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.Customizing">
            <summary>
            Gets the value indicating wether the cell is currently customizing via CustomizeCell event.
            </summary>
            <remarks><b>Customizing</b> can be used to determine wether the cell is customizing via CustomizeCell event and
            do additional task. For example, <see cref="P:Resco.Controls.AdvancedList.Cell.Bounds"/> does not notify AdvancedList about change, because new Bounds
            are related to that customizing cell only.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.Name">
            <summary>
            Gets or sets the name of the Cell.
            </summary>
            <value>The name of the cell.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.DesignName">
            <summary>
            Gets or sets the design-time name of the Cell.
            </summary>
            <value>The design-time name of the cell.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.Selectable">
            <summary>
            Gets or sets a value indicating whether the current cell can be selected.
            </summary>
            <remarks>
            If the cell is selectable, you can set the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedCell"/> property to select
            this cell. A rectangle will be drawn around the cell to indicate that this cell is selected. You can override
            this behavior by implementing your own <see cref="M:Resco.Controls.AdvancedList.Cell.DrawSelection(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method. You can also use the
            right and left arrow keys, if <see cref="P:Resco.Controls.AdvancedList.AdvancedList.KeyNavigation"/> is turned on to select the selectable
            cells within the currently selected row's RowTemplate. If the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.KeyNavigation"/> is
            turned on, AdvancedList uses the <see cref="M:Resco.Controls.AdvancedList.AdvancedList.NextSelectableCell"/> or
            <see cref="M:Resco.Controls.AdvancedList.AdvancedList.PreviousSelectableCell"/> methods to select next or previous selectable cell.
            </remarks>
            <seealso cref="P:Resco.Controls.AdvancedList.AdvancedList.SelectedCell"/>
            <seealso cref="M:Resco.Controls.AdvancedList.AdvancedList.NextSelectableCell"/>
            <seealso cref="M:Resco.Controls.AdvancedList.AdvancedList.PreviousSelectableCell"/>
        </member>
        <member name="E:Resco.Controls.AdvancedList.Cell.CellEntered">
            <summary>
            This event is raised if either a selectable cell is clicked by a mouse or enter key is pressed while
            this cell is selected.
            </summary>
            <remarks>
            Note that <see cref="!:AdvancedList.Cell.Selected"/> property must be set to true for this event to
            fire. Also <see cref="P:Resco.Controls.AdvancedList.AdvancedList.KeyNavigation"/> must be turned on.
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.CurrentRow">
            <summary>
            Gets During drawing contains the reference to current row.
            </summary>
            <example>
            The following sample demonstrates the usage in the derived cell (C# only, see also example
            in <see cref="M:Resco.Controls.AdvancedList.Mapping.AddColumns(System.String[])"/> method of Mapping):
            <sample name="ColorCell">
        <code lang="C#"><![CDATA[
class ColorTextCell : Resco.Controls.TextCell
{
    public ColorTextCell(Resco.Controls.TextCell c) : base(c)
    {
    }
	
	// The BackColor and ForeColor of this TextCell are bound
	// to the respective columns in currently drawn row,
	// thus allowing us to change it for every row separately.

    public override Color BackColor
    {
        get
        {
            // take the color from current data, they are set when 
            // drawing the row
            object backColor = CurrentRow["BackColor"];
            if (backColor is Color)			
                return (Color) backColor;
            
            // if using the BoundRow and DataTable, you have to convert
            // it to/from string
            
            return Color.Transparent;
        }
    }
    public override Color ForeColor
    {
        get
        {
            // take the color from current data, they are set when 
            // drawing the row
            object foreColor = CurrentRow["ForeColor"];
            if (foreColor is Color)
                return (Color) foreColor;
            return Color.Transparent;
        }
    }
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.Parent">
            <summary>
            Gets the reference to parent AdvancedList.
            </summary>
            <value>Reference to parent AdvancedList or <see langref="null"/>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Cell.Graphics">
            <summary>
            Gets the reference to current graphics to draw.
            </summary>
            <value><see cref="P:Resco.Controls.AdvancedList.Cell.Graphics"/> which can be used to draw to or <see langref="null"/>.</value>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ButtonCell.#ctor">
            <summary>
            Empty constructor, sets default values.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ButtonCell.#ctor(Resco.Controls.AdvancedList.ButtonCell)">
            <summary>
            Copy constructor.
            </summary>
            <param name="cell">The ButtonCell to create copy from.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ButtonCell.Clone">
            <summary>
            Clones the ButtonCell.
            </summary>
            <remarks>The Cell cannot be used in more then one RowTemplate. 
            Use this method to create the copy of the cell in another template.</remarks>
            <returns>A new ButtonCell with the same properties as the current ButtonCell.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ButtonCell.DrawContent(System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Draws the contents of the cell.
            </summary>
            <param name="gr">drawing surface</param>
            <param name="drawbounds">bounds of cell</param>
            <param name="data">data to display</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ButtonCell.ShouldSerializeImageList">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.ButtonCell.ImageList"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ButtonCell.ShouldSerializeButtonStyle">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.ButtonCell.ButtonStyle"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ButtonCell.ShouldSerializeTextAlignment">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.ButtonCell.TextAlignment"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ButtonCell.ShouldSerializeImageAlignment">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.ButtonCell.ImageAlignment"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ImageList">
            <summary>
            Gets or sets the image list.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.ImageList"/> containing the images drawn 
            by the button.</value>
            If no ImageList is associated with button cell, images passed to <see cref="P:Resco.Controls.AdvancedList.ButtonCell.ImageDefault"/>,
            <see cref="P:Resco.Controls.AdvancedList.ButtonCell.ImageDefaultVGA"/>, <see cref="P:Resco.Controls.AdvancedList.ButtonCell.ImagePressed"/> and <see cref="P:Resco.Controls.AdvancedList.ButtonCell.ImagePressedVGA"/> are used
            when drawing content of ButtonCell.
            <remarks>
            <note>Images from the image list are cached for the better performance, so be sure to 
            set the <see cref="P:Resco.Controls.AdvancedList.ButtonCell.ImageList"/> property again, when some changes were made in the 
            image list. Or call <see cref="!:AdvancedComboBox.ResetImageCache"/> metohd to clear cache.</note>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ImageIndex">
            <summary>
            Gets or sets image index for the cell.
            </summary>
            <value>
            Positive value means constant index in image list.
            Otherwise index in image list is taken from data.
            </value>
            <remarks>By setting the ImageIndex, the <see cref="T:Resco.Controls.AdvancedList.CellSource"/> is changed 
            to <see cref="!:Resco.Controls.CellSourceType.Constant"/>, and contains the image index.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ButtonStyle">
            <summary>
            Gets or sets the button's type.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.TextFont">
            <summary>
            Gets or sets the font for displaying the text.
            </summary>
            <value>The <see cref="T:System.Drawing.Font"/> for displaying the text.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text <see cref="!:Resco.Controls.Alignment"/>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.TextPosition">
            <summary>
            Gets or sets the text position in button.
            </summary>
            <value>The button text position.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.DisabledBackColor">
            <summary>
            Gets or sets the background color of a cell, when the cell is disabled.
            </summary>
            <value>The background <see cref="T:System.Drawing.Color"/> of a cell, default 
            <see cref="P:System.Drawing.Color.Transparent"/></value>
            <remarks>When the BackColor is <see cref="P:System.Drawing.Color.Transparent"/>, no background is drawn,
            and cell seems transparent.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.DisabledForeColor">
            <summary>
            Gets or sets the foreground color of a cell, when the cell is disabled.
            </summary>
            <value>The foreground <see cref="T:System.Drawing.Color"/> of a cell.</value>
            <remarks>When the ForeColor is <see cref="P:System.Drawing.Color.Transparent"/>, the color for the foreground,
            is taken from the <see cref="P:Resco.Controls.AdvancedList.RowTemplate.ForeColor"/> property of the owner row template.
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.BorderColor">
            <summary>
            Gets or sets the color of the button border.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the button border.</value>
            <remarks>Default value is <see cref="P:System.Drawing.SystemColors.ControlDark"/>.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.PressedForeColor">
            <summary>
            Gets or sets the foreground color of the pressed button.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the pressed button foreground.</value>
            <remarks>Default value is <see cref="P:System.Drawing.SystemColors.Highlight"/>.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.PressedBackColor">
            <summary>
            Gets or sets the background color of the pressed button.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the pressed button background.</value>
            <remarks>Default value is <see cref="P:System.Drawing.SystemColors.ControlDark"/>.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.PressedBorderColor">
            <summary>
            Gets or sets the color of the pressed button border.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the pressed button border.</value>
            <remarks>Default value is <see cref="P:System.Drawing.SystemColors.ControlDarkDark"/>.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ImageDefault">
            <summary>
            Gets or sets the default image of button cell.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> of the button cell.</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ImageDefaultVGA">
            <summary>
            Gets or sets the default image in VGA resolution of button cell.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> of the button cell.</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ImageDisabled">
            <summary>
            Gets or sets the default image of button cell, when the button is disabled.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> of the button cell.</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ImageDisabledVGA">
            <summary>
            Gets or sets the default image in VGA resolution of button cell, when the button is disabled.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> of the button cell.</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ImagePressed">
            <summary>
            Gets or sets the pressed image of button cell.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> of the button cell.</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ImagePressedVGA">
            <summary>
            Gets or sets the pressed image in VGA resolutin of button cell.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> of the button cell.</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ImageAlignment">
            <summary>
            Gets or sets the image alignment.
            </summary>
            <value>The image <see cref="!:Resco.Controls.Alignment"/>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.ImagePosition">
            <summary>
            Gets or sets the image position in button.
            </summary>
            <value>The button image position.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.AutoResizeImage">
            <summary>
            Gets or sets whether to stretch the DefaultImage.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.AutoTransparent">
            <summary>
            Gets or sets autotransparency.
            </summary>
            <value> If true, color in in pixel (0,0) of each image is made transparent. </value>
            <remarks>Autotransparency can slow down the drawing of the cell.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.TransparentColor">
            <summary>
            Gets or sets the transparent color.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/>, which is made transparent.</value>
            <remarks>The default value is <see cref="P:System.Drawing.Color.Transparent"/>, which means that
            no color in images is made transparent. Setting this property may not result in the
            desired effect on the Compact Framework due to a use of 
            <see cref="T:System.Drawing.Imaging.ImageAttributes"/>
            to set the color key.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.TouchMargin">
            <summary>
            Gets or sets the text touch margin of button in cell.
            </summary>
            <value>The button touch margin.</value>
            <remarks>
            The touch area of button is shrinked by amount of TouchMargin.
            Useful when two buttons are positioned close to each other.
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.Enabled">
            <summary>
            Gets or sets a value indicating whether the control can respond to user interaction.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ButtonCell.Pressed">
            <summary>
            Used to store temporary information about button state
            </summary>
            <value>bool value representing the state of button.</value>
        </member>
        <member name="T:Resco.Controls.AdvancedList.ButtonCell.ButtonType">
            <summary>
            Specifies the types of the ButtonCell.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ButtonCell.ButtonType.ImageButton">
            <summary>
            Standard button, shows an image. 
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ButtonCell.ButtonType.VistaStyleImageButton">
            <summary>
            Vista-style button, shows a vista-style background under image. 
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.TextCell">
            <summary>
            TextCell is a Cell used to display text.
            </summary>
            <remarks>
            <p>The TextCell is a <see cref="T:Resco.Controls.AdvancedList.Cell"/> capable of diplaying formated and aligned text. 
            Text can have defined <see cref="P:Resco.Controls.AdvancedList.Cell.ForeColor"/> and <see cref="P:Resco.Controls.AdvancedList.TextCell.TextFont"/>.</p>
            <p><see cref="P:Resco.Controls.AdvancedList.TextCell.FormatString"/> is used to display the data in formated manner. 
            Setting the <see cref="P:Resco.Controls.AdvancedList.TextCell.Alignment"/> property you can control the placement of the text.
            If the text doesn't fit to <see cref="P:Resco.Controls.AdvancedList.Cell.Bounds"/> it is cropped, and can be displayed using 
            the tooltip.</p>
            </remarks>  
            <example>
            This sample shows the generated code to create text cell displaying totals with
            currency information, see the format string used:
            <sample name="TextCell">
        <code lang="Visual Basic"><![CDATA[
Dim TextCell1 As New Resco.Controls.TextCell
TextCell1.Alignment = Resco.Controls.Alignment.TopRight
TextCell1.Bounds = New System.Drawing.Rectangle(0, 16, -1, 16)
TextCell1.CellSource.ColumnName = "Total"
' We display the currency information with the constant text "Total: "
TextCell1.FormatString = "Total: {0:c}";
TextCell1.TextFont = New System.Drawing.Font(_
    "Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold)
RowTemplate1.CellTemplates.Add(TextCell1)
            ]]></code>
        <code lang="C#"><![CDATA[
Resco.Controls.TextCell textCell1 = new Resco.Controls.TextCell();
textCell1.Alignment = Resco.Controls.Alignment.TopRight;
textCell1.Bounds = new System.Drawing.Rectangle(0, 16, -1, 16);
textCell1.CellSource.ColumnName = "Total";
// We display the currency information with the constant text "Total: "
textCell1.FormatString = "Total: {0:c}";
textCell1.TextFont = new System.Drawing.Font(
    "Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold);
rowTemplate1.CellTemplates.Add(textCell1);
           ]]></code>
    </sample>
            </example>        
        </member>
        <member name="M:Resco.Controls.AdvancedList.TextCell.ShouldSerializeAlignment">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.TextCell.Alignment"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TextCell.#ctor">
            <summary>
            Empty constructor. Sets default values.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TextCell.#ctor(Resco.Controls.AdvancedList.TextCell)">
            <summary>
            Copy constructor.
            </summary>
            <param name="tc">Text cell to copy the parameters from.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TextCell.Clone">
            <summary>
            Clones the TextCell.
            </summary>
            <remarks>The Cell cannot be used in more then one RowTemplate. 
            Use this method to create the copy of the cell in another template.</remarks>
            <returns>A new TextCell with the same properties as the current TextCell.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TextCell.GetText(System.Object)">
            <summary>
            Gets the text to display based on given data.
            </summary>
            <remarks>Performs the formatting of data in text cell.</remarks>
            <param name="data">Data to convert to text cell.</param>
            <returns>Text that is to be displayed in the cell.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TextCell.DrawContent(System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Draws the contents of the cell.
            </summary>
            <param name="gr">drawing surface</param>
            <param name="drawbounds">bounds of cell</param>
            <param name="data">data to display</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TextCell.DrawToolTip(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Rectangle,System.String)">
            <summary>
            Draws the tooltip for the specified cell.
            </summary>
            <param name="gr"><see cref="T:System.Drawing.Graphics"/> to draw to.</param>
            <param name="foreBrush"><see cref="T:System.Drawing.Brush"/> for drawing the tooltip, its default Color is ForeColor.</param>
            <param name="text">Text of the tooltip.</param>
            <param name="layoutRectangle"></param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TextCell.GetAutoHeight(Resco.Controls.AdvancedList.Row,System.Int32,Resco.Controls.AdvancedList.RowSpecificCellProperties)">
            <summary>
            Computes the height of the cell when the cell is AutoHeight cell.
            </summary>
            <param name="r">Row with data.</param>
            <param name="index">Index of the cell in cell collection.</param>
            <returns>Display height of the cell based.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TextCell.DrawTextLine(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw the line of text at given position.
            </summary>
            <remarks>Is implemented by: <c>gr.DrawString( line, font, brush, x, y );</c></remarks>
            <param name="gr">Graphics to use.</param>
            <param name="line">Text of line.</param>
            <param name="font">Font to use.</param>
            <param name="brush">Brush to use.</param>
            <param name="x">Top coordinate of line.</param>
            <param name="y">Left coordinate of line.</param>
            <param name="width">Width of line.</param>
            <param name="height">Height of line.</param>
            <param name="textIndex">Index of the line relative to whole text.</param>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TextCell.TextFont">
            <summary>
            Gets or sets the font for displaying the text.
            </summary>
            <value>The <see cref="T:System.Drawing.Font"/> for displaying the text.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TextCell.Alignment">
            <summary>
            Gets or sets the Alignment of a text diplayed in the TextCell.
            </summary>
            <value>The <see cref="!:Resco.Controls.Alignment"/> of a text diplayed in the TextCell.</value>
            <remarks>If the text doesn't fit to cell it is cropped, 
            and can be displayed using tooltips.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TextCell.FormatString">
            <summary>
            Gets or sets the format string used to convert data to text to display.
            </summary>
            <value>The format string used to convert data to text to display.</value>
            <remarks>The provided string is used as an argument to String.<see cref="M:System.String.Format(System.String,System.Object)"/> 
            function, to convert data provided as a second argument. The data are represented
            by {0} in the format string.</remarks>
            <seealso cref="M:System.String.Format(System.String,System.Object)"/>
            <example>
            This sample shows the generated code to create text cell displaying totals with
            currency information, see the format string used:
            <sample name="TextCell">
        <code lang="Visual Basic"><![CDATA[
Dim TextCell1 As New Resco.Controls.TextCell
TextCell1.Alignment = Resco.Controls.Alignment.TopRight
TextCell1.Bounds = New System.Drawing.Rectangle(0, 16, -1, 16)
TextCell1.CellSource.ColumnName = "Total"
' We display the currency information with the constant text "Total: "
TextCell1.FormatString = "Total: {0:c}";
TextCell1.TextFont = New System.Drawing.Font(_
    "Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold)
RowTemplate1.CellTemplates.Add(TextCell1)
            ]]></code>
        <code lang="C#"><![CDATA[
Resco.Controls.TextCell textCell1 = new Resco.Controls.TextCell();
textCell1.Alignment = Resco.Controls.Alignment.TopRight;
textCell1.Bounds = new System.Drawing.Rectangle(0, 16, -1, 16);
textCell1.CellSource.ColumnName = "Total";
// We display the currency information with the constant text "Total: "
textCell1.FormatString = "Total: {0:c}";
textCell1.TextFont = new System.Drawing.Font(
    "Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold);
rowTemplate1.CellTemplates.Add(textCell1);
           ]]></code>
    </sample>
            </example>        
        </member>
        <member name="P:Resco.Controls.AdvancedList.TextCell.SelectedForeColor">
            <summary>
            Gets or sets the selected foreground color of a TextCell.
            </summary>
            <value>The selected foreground <see cref="T:System.Drawing.Color"/> of a TextCell.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TextCell.SelectedBackColor">
            <summary>
            Gets or sets the selected background color of a TextCell.
            </summary>
            <value>The selected background <see cref="T:System.Drawing.Color"/> of a TextCell.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TextCell.SelectedText">
            <summary>
            Gets or sets the selected text of a TextCell.
            </summary>
            <value>The selected text of a TextCell.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TextCell.SelectedTextCompareOptions">
            <summary>
            Gets or sets <see cref="T:System.Globalization.CompareOptions"/> for the <see cref="P:Resco.Controls.AdvancedList.TextCell.SelectedText"/>.
            </summary>
            <value>A bitwise combination of the <see cref="T:System.Globalization.CompareOptions"/> values. The default is <b>IgnoreCase</b>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TextCell.RestrictSelectedTextToStart">
            <summary>
            Gets or sets the restriction for selected text property of a TextCell.
            </summary>
            <value>If true SelectedText property is applied only on start of string.</value>
        </member>
        <member name="T:Resco.Controls.AdvancedList.Mapping">
            <summary>
            Used as a map between column names and column indices.
            </summary>
            <remarks>The mapping is used by the <see cref="T:Resco.Controls.AdvancedList.Row"/> to determine the position
            of the field by name, not by the index. Mapping uses <see cref="T:System.Collections.Hashtable"/> as the
            underlying type for fast access to column indices. Once created, the mapping cannot be
            changed. When you load data from database, and you need some empty columns, create them 
            with the select command, e.g. <code>SELECT *, 0 as Flag FROM customers</code>.
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Mapping.#ctor">
            <summary>
            Creates empty mapping.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Mapping.#ctor(System.String[])">
            <summary>
            Creates the mapping from the array of field names.
            </summary>
            <param name="names">array of unique field names</param>
            <remarks>Use this constructor for known field names. 
            The order of names and their count cannot be changed.</remarks>
            <example>
            <code lang="VisualBasic">
            <![CDATA[ Dim names() As String = {"Id", "Name", "Value"}
            Dim map As New Mapping(names) ]]></code>
            <code lang="C#">
            <![CDATA[ Mapping map = new Mapping(new string[] {"Id", "Name", "Value"}); ]]>
            </code>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Mapping.#ctor(System.Data.IDataRecord)">
            <summary>
            Creates the mapping from the data reader (or other IDataRecord).
            </summary>
            <param name="reader">Data reader or IDataRecord, must have unique field names</param>
            <remarks>Use this constructor when loading data from database with the 
            <see cref="T:System.Data.IDataReader"/>. The order of names and their count cannot be changed.</remarks>
            <example>
            <code lang="VisualBasic"><![CDATA[ Dim map As New Mapping(reader) ]]></code>
            <code lang="C#"><![CDATA[ Mapping map = new Mapping(reader); ]]>
            </code>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Mapping.AddColumns(System.String[])">
            <summary>
            Add column names to mapping.
            </summary>
            <param name="names">Additional columns.</param>
            <example>
            The following sample demonstrates how to add columns when validating data 
            (C# only, see also example in <see cref="P:Resco.Controls.AdvancedList.Cell.CurrentRow"/>):
            <sample name="Mapping.AddColumns">
        <code lang="C#"><![CDATA[
private void advancedList1_ValidateData(object sender, Resco.Controls.ValidateDataArgs e)
{
    if (e.DataRow.FieldNames.GetOrdinal("BackColor") == -1)
        e.DataRow.FieldNames.AddColumns(new string[] {"BackColor", "ForeColor"});
    e.DataRow["ForeColor"] = Color.FromArgb((int)r["R"], (int)r["G"], (int)r["B"]);
    e.DataRow["BackColor"] = Color.FromArgb(255-(int)r["R"], 255-(int)r["G"], 255-(int)r["B"]);
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Mapping.GetOrdinal(System.String)">
            <summary>
            Gets the ordinal of the named field.
            </summary>
            <param name="name">Name of the field</param>
            <returns>Ordinal of the field</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Mapping.GetName(System.Int32)">
            <summary>
            Gets the name of the field.
            </summary>
            <param name="i">Ordinal of the field</param>
            <returns>Name of the field</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Mapping.Equals(System.Object)">
            <summary>
            Tests whether <i>obj</i> is a <see cref="T:Resco.Controls.AdvancedList.Mapping"/> object of this <see cref="T:Resco.Controls.AdvancedList.Mapping"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>This method returns <b>true</b> if <i>obj</i> is a <see cref="T:Resco.Controls.AdvancedList.Mapping"/> object 
            is equal to this <see cref="!:GpsLocation"/> object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Mapping.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="!:GpsLocation"/> structure.
            </summary>
            <returns>An integer that represents the hash code for this <see cref="!:GpsLocation"/>.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Mapping.op_Equality(Resco.Controls.AdvancedList.Mapping,Resco.Controls.AdvancedList.Mapping)">
            <summary>
            Tests whether two <see cref="T:Resco.Controls.AdvancedList.Mapping"/> objects are equal.
            </summary>
            <param name="m1">The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> opbject on the left side of the equality operator.</param>
            <param name="m2">The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> object on the right of the equality operator.</param>
            <returns><b>true</b> if m1 and m2 are both empty or are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Mapping.op_Inequality(Resco.Controls.AdvancedList.Mapping,Resco.Controls.AdvancedList.Mapping)">
            <summary>
            Tests whether two <see cref="T:Resco.Controls.AdvancedList.Mapping"/> structures are different.
            </summary>
            <param name="m1">The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> object on the left of the inequality operator. </param>
            <param name="m2">The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> object on the right of the inequality operator.</param>
            <returns><b>true</b> if l1 and l2 differ either in latitude or longitude; <b>false</b> if l1 and l2 are equal.</returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Mapping.Empty">
            <summary>
            Denotes the constant empty mapping.
            </summary>
            <value>Empty mapping.</value>
            <remarks>Use this property instead of null, can distinguish between mapped and 
            unmapped rows.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Mapping.FieldCount">
            <summary>
            Gets the number of fields.
            </summary>
            <value>The number of fields.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Mapping.Item(System.Int32)">
            <summary>
            Indexer, gets the name of the field.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">If the index is incorrect.</exception>
            <exception cref="T:System.NullReferenceException">If the mapping is empty mapping.</exception>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Mapping.Names">
            <summary>
            Gets the column names.
            </summary>
            <remarks>The returned array is a copy of internal array, the names can't be changed.</remarks>
        </member>
        <member name="T:Resco.Controls.AdvancedList.TableMapping">
            <summary>
            Special <see cref="T:Resco.Controls.AdvancedList.Mapping"/> used for the <see cref="T:Resco.Controls.AdvancedList.BoundRow"/>.
            </summary>
            <remarks>TableMapping is bound to <see cref="T:System.Data.DataTable"/>, and is only wrapper for compatibility with AdvancedList.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TableMapping.#ctor(System.Data.DataTable)">
            <summary>
            Creates the TableMapping wrapper for the specified <see cref="P:Resco.Controls.AdvancedList.TableMapping.DataTable"/>.
            </summary>
            <param name="table">The <see cref="P:Resco.Controls.AdvancedList.TableMapping.DataTable"/> to bound the mapping to.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TableMapping.GetName(System.Int32)">
            <summary>
            Returns the name of the i-th column in the underlying <see cref="P:Resco.Controls.AdvancedList.TableMapping.DataTable"/>.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The name of the column or null, if the index is out of range.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TableMapping.GetOrdinal(System.String)">
            <summary>
            Returns the index of the column with given name in the underlying <see cref="P:Resco.Controls.AdvancedList.TableMapping.DataTable"/>.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The index of the column or -1, if the column is not in the table.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TableMapping.AddColumns(System.String[])">
            <summary>
            Add the columns to underlying datatable.
            </summary>
            <remarks>The created columns are of type <see cref="T:System.String"/>. </remarks>
            <param name="names">The names of the columns to add.</param>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TableMapping.FieldCount">
            <summary>
            Returns the number of columns of the underlying <see cref="P:Resco.Controls.AdvancedList.TableMapping.DataTable"/>.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TableMapping.Item(System.Int32)">
            <summary>
            Returns the name of the i-th column in the underlying <see cref="P:Resco.Controls.AdvancedList.TableMapping.DataTable"/>.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The name of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException">if the index is out of range.</exception>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TableMapping.Names">
            <summary>
            Returns the array of column names.
            </summary>
            <remarks>The names can't be changed.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TableMapping.DataTable">
            <summary>
            Gets the underlying <see cref="P:Resco.Controls.AdvancedList.TableMapping.DataTable"/>.
            </summary>
            <value>The underlying <see cref="P:Resco.Controls.AdvancedList.TableMapping.DataTable"/>.</value>
        </member>
        <member name="T:Resco.Controls.AdvancedList.BoundRow">
            <summary>
            The BoundRow is a wrapper derived from <see cref="T:Resco.Controls.AdvancedList.Row"/> that is used for databinding. You can either wrap <see cref="T:System.Data.DataRow"/> or any object using <see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/>.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.BoundRow.#ctor(System.Int32,System.Int32,System.Data.DataRow,Resco.Controls.AdvancedList.Mapping)">
            <summary>
            Creates new bound row with the defined parameters.
            </summary>
            <remarks>This constructor is usefull when binding more <see cref="P:Resco.Controls.AdvancedList.BoundRow.DataRow"/>s from the same <see cref="T:System.Data.DataTable"/>. Parameter <paramref name="fieldNames"/> is then created once for a table as a <see cref="T:Resco.Controls.AdvancedList.TableMapping"/>, effectively identifying multiple rows.</remarks>
            <param name="templateIndex">The template index for row in deselected state.</param>
            <param name="selectedTemplateIndex">The template index for row in selected state.</param>
            <param name="row">The underlying <see cref="P:Resco.Controls.AdvancedList.BoundRow.DataRow"/>.</param>
            <param name="fieldNames">The table mapping.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.BoundRow.#ctor(System.Int32,System.Int32,System.Data.DataRow)">
            <summary>
            Creates new bound row with the defined parameters.
            </summary>
            <remarks>This constructor creates new <see cref="T:Resco.Controls.AdvancedList.TableMapping"/> for the row's <see cref="P:System.Data.DataRow.Table"/>.</remarks>
            <param name="templateIndex">The template index for row in deselected state.</param>
            <param name="selectedTemplateIndex">The template index for row in selected state.</param>
            <param name="row">The underlying <see cref="P:Resco.Controls.AdvancedList.BoundRow.DataRow"/>.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.BoundRow.#ctor(System.Data.DataRow)">
            <summary>
            Creates new bound row.
            </summary>
            <remarks>This constructor creates new <see cref="T:Resco.Controls.AdvancedList.TableMapping"/> for the row's <see cref="P:System.Data.DataRow.Table"/>. The template indices are set to 0.</remarks>
            <param name="row">The underlying <see cref="P:Resco.Controls.AdvancedList.BoundRow.DataRow"/>.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.BoundRow.#ctor(System.Int32,System.Int32,System.Object,Resco.Controls.AdvancedList.PropertyMapping)">
            <summary>
            Creates new bound row from any object given its <see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/>.
            </summary>
            <param name="templateIndex">The template index for row in deselected state.</param>
            <param name="selectedTemplateIndex">The template index for row in selected state.</param>
            <param name="data"><see cref="T:System.Object"/> to bind to.</param>
            <param name="propertyMapping"><see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/> created for the type or PropertyDescriptors for data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.BoundRow.#ctor(System.Int32,System.Int32,System.Object,Resco.Controls.AdvancedList.PropertyMapping,System.Boolean)">
            <summary>
            Creates new bound row from any object given its <see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/>.
            </summary>
            <param name="templateIndex">The template index for row in deselected state.</param>
            <param name="selectedTemplateIndex">The template index for row in selected state.</param>
            <param name="data"><see cref="T:System.Object"/> to bind to.</param>
            <param name="propertyMapping"><see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/> created for the type or PropertyDescriptors for data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.BoundRow.SetData(System.Collections.ICollection)">
            <summary>
            Copies the data from the collection to the row.
            </summary>
            <param name="data">Collection of data, count of data must be equal to field count of row</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="data"/> has different
            <see cref="P:System.Array.Length"/> as the <see cref="P:Resco.Controls.AdvancedList.BoundRow.FieldCount"/> of the Row.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when bound to other type then DataRow.</exception>
        </member>
        <member name="M:Resco.Controls.AdvancedList.BoundRow.SetData(System.Data.IDataRecord)">
            <summary>
            Copies the data from data reader or other data records.
            </summary>
            <param name="reader">Data reader or other implementation of <see cref="T:System.Data.IDataRecord"/>.</param>
            <remarks>Source must have the same field count as row, data mapping is ignored by loading 
            the data. It is recommended to create the mapping from the <paramref name="reader"/></remarks>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="reader"/> has different
            <see cref="P:System.Data.IDataRecord.FieldCount"/> as the Row.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when bound to other type then DataRow.</exception>
        </member>
        <member name="M:Resco.Controls.AdvancedList.BoundRow.GetData(System.Object[])">
            <summary>
            Make the copy of internal data to object array.
            </summary>
            <param name="data"><see cref="T:System.Array"/> of objects, length of the array must be equal 
            to field count of the row.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="data"/> has different
            <see cref="P:System.Array.Length"/> as the <see cref="P:Resco.Controls.AdvancedList.BoundRow.FieldCount"/> of the Row.</exception>
        </member>
        <member name="M:Resco.Controls.AdvancedList.BoundRow.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.BoundRow.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.BoundRow.FieldCount">
            <summary>
            Gets the number of fields in row.
            </summary>
            <remarks>Returns the number of columns of the underlying <see cref="P:Resco.Controls.AdvancedList.BoundRow.DataRow"/>.</remarks>
            <value>The number of fields in row.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.BoundRow.FieldNames">
            <summary>
            Gets or sets the mapping of field names.
            </summary>
            <value>The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of field names.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.BoundRow.DataRow">
            <summary>
            Gets the underlying DataRow.
            </summary>
            <value>The underlying <see cref="P:Resco.Controls.AdvancedList.BoundRow.DataRow"/>, or null if bound to other type.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.BoundRow.Data">
            <summary>
            Gets the underlying object we are bound to.
            </summary>
            <value>The underlying <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.BoundRow.Item(System.Int32)">
            <summary>
            Gets or sets the data at given index.
            </summary>
            <value>The data at given index.</value>
            <remarks>The index bounds are checked and <see langword="null"/> is returned, 
            or value is not set, when the index is incorrect.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.BoundRow.Item(System.String)">
            <summary>
            Gets or sets the data in the named field.
            </summary>
            <value>The data in the named field.</value>
            <remarks>If the field is not found, <see langword="null"/> is returned, or
            value is not set.</remarks>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CopyOfBoundRow">
            <summary>
            The BoundRow is a wrapper derived from <see cref="T:Resco.Controls.AdvancedList.Row"/> that is used for databinding. You can either wrap <see cref="T:System.Data.DataRow"/> or any object using <see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/>.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfBoundRow.#ctor(System.Int32,System.Int32,System.Data.DataRow,Resco.Controls.AdvancedList.Mapping)">
            <summary>
            Creates new bound row with the defined parameters.
            </summary>
            <remarks>This constructor is usefull when binding more <see cref="P:Resco.Controls.AdvancedList.CopyOfBoundRow.DataRow"/>s from the same <see cref="T:System.Data.DataTable"/>. Parameter <paramref name="fieldNames"/> is then created once for a table as a <see cref="T:Resco.Controls.AdvancedList.TableMapping"/>, effectively identifying multiple rows.</remarks>
            <param name="templateIndex">The template index for row in deselected state.</param>
            <param name="selectedTemplateIndex">The template index for row in selected state.</param>
            <param name="row">The underlying <see cref="P:Resco.Controls.AdvancedList.CopyOfBoundRow.DataRow"/>.</param>
            <param name="fieldNames">The table mapping.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfBoundRow.#ctor(System.Int32,System.Int32,System.Data.DataRow)">
            <summary>
            Creates new bound row with the defined parameters.
            </summary>
            <remarks>This constructor creates new <see cref="T:Resco.Controls.AdvancedList.TableMapping"/> for the row's <see cref="P:System.Data.DataRow.Table"/>.</remarks>
            <param name="templateIndex">The template index for row in deselected state.</param>
            <param name="selectedTemplateIndex">The template index for row in selected state.</param>
            <param name="row">The underlying <see cref="P:Resco.Controls.AdvancedList.CopyOfBoundRow.DataRow"/>.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfBoundRow.#ctor(System.Data.DataRow)">
            <summary>
            Creates new bound row.
            </summary>
            <remarks>This constructor creates new <see cref="T:Resco.Controls.AdvancedList.TableMapping"/> for the row's <see cref="P:System.Data.DataRow.Table"/>. The template indices are set to 0.</remarks>
            <param name="row">The underlying <see cref="P:Resco.Controls.AdvancedList.CopyOfBoundRow.DataRow"/>.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfBoundRow.#ctor(System.Int32,System.Int32,System.Object,Resco.Controls.AdvancedList.PropertyMapping)">
            <summary>
            Creates new bound row from any object given its <see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/>.
            </summary>
            <param name="templateIndex">The template index for row in deselected state.</param>
            <param name="selectedTemplateIndex">The template index for row in selected state.</param>
            <param name="data"><see cref="T:System.Object"/> to bind to.</param>
            <param name="propertyMapping"><see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/> created for the type or PropertyDescriptors for data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfBoundRow.#ctor(System.Int32,System.Int32,System.Object,Resco.Controls.AdvancedList.PropertyMapping,System.Boolean)">
            <summary>
            Creates new bound row from any object given its <see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/>.
            </summary>
            <param name="templateIndex">The template index for row in deselected state.</param>
            <param name="selectedTemplateIndex">The template index for row in selected state.</param>
            <param name="data"><see cref="T:System.Object"/> to bind to.</param>
            <param name="propertyMapping"><see cref="T:Resco.Controls.AdvancedList.PropertyMapping"/> created for the type or PropertyDescriptors for data.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfBoundRow.SetData(System.Collections.ICollection)">
            <summary>
            Copies the data from the collection to the row.
            </summary>
            <param name="data">Collection of data, count of data must be equal to field count of row</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="data"/> has different
            <see cref="P:System.Array.Length"/> as the <see cref="P:Resco.Controls.AdvancedList.CopyOfBoundRow.FieldCount"/> of the Row.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when bound to other type then DataRow.</exception>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfBoundRow.SetData(System.Data.IDataRecord)">
            <summary>
            Copies the data from data reader or other data records.
            </summary>
            <param name="reader">Data reader or other implementation of <see cref="T:System.Data.IDataRecord"/>.</param>
            <remarks>Source must have the same field count as row, data mapping is ignored by loading 
            the data. It is recommended to create the mapping from the <paramref name="reader"/></remarks>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="reader"/> has different
            <see cref="P:System.Data.IDataRecord.FieldCount"/> as the Row.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when bound to other type then DataRow.</exception>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfBoundRow.GetData(System.Object[])">
            <summary>
            Make the copy of internal data to object array.
            </summary>
            <param name="data"><see cref="T:System.Array"/> of objects, length of the array must be equal 
            to field count of the row.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="data"/> has different
            <see cref="P:System.Array.Length"/> as the <see cref="P:Resco.Controls.AdvancedList.CopyOfBoundRow.FieldCount"/> of the Row.</exception>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfBoundRow.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfBoundRow.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CopyOfBoundRow.FieldCount">
            <summary>
            Gets the number of fields in row.
            </summary>
            <remarks>Returns the number of columns of the underlying <see cref="P:Resco.Controls.AdvancedList.CopyOfBoundRow.DataRow"/>.</remarks>
            <value>The number of fields in row.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CopyOfBoundRow.FieldNames">
            <summary>
            Gets or sets the mapping of field names.
            </summary>
            <value>The <see cref="T:Resco.Controls.AdvancedList.Mapping"/> of field names.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CopyOfBoundRow.DataRow">
            <summary>
            Gets the underlying DataRow.
            </summary>
            <value>The underlying <see cref="P:Resco.Controls.AdvancedList.CopyOfBoundRow.DataRow"/>, or null if bound to other type.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CopyOfBoundRow.Data">
            <summary>
            Gets the underlying object we are bound to.
            </summary>
            <value>The underlying <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CopyOfBoundRow.Item(System.Int32)">
            <summary>
            Gets or sets the data at given index.
            </summary>
            <value>The data at given index.</value>
            <remarks>The index bounds are checked and <see langword="null"/> is returned, 
            or value is not set, when the index is incorrect.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CopyOfBoundRow.Item(System.String)">
            <summary>
            Gets or sets the data in the named field.
            </summary>
            <value>The data in the named field.</value>
            <remarks>If the field is not found, <see langword="null"/> is returned, or
            value is not set.</remarks>
        </member>
        <member name="T:Resco.Controls.AdvancedList.ToolTip">
            <summary>
            Summary description for ToolTip.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.GradientColor">
            <summary>
            Represents a gradient color.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.#ctor">
            <summary>
            Initializes a new instance of the GradientColor class. 
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.#ctor(Resco.Controls.AdvancedList.FillDirection)">
            <summary>
            Initializes a new instance of the GradientColor class.
            </summary>
            <param name="fillDirection">Fill direction.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the GradientColor class.
            </summary>
            <param name="startColor">Start color.</param>
            <param name="endColor">End color.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.#ctor(System.Drawing.Color,System.Drawing.Color,Resco.Controls.AdvancedList.FillDirection)">
            <summary>
            Initializes a new instance of the GradientColor class.
            </summary>
            <param name="startColor">Start color.</param>
            <param name="endColor">End color.</param>
            <param name="fillDirection">Fill direction.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,Resco.Controls.AdvancedList.FillDirection)">
            <summary>
            Initializes a new instance of the GradientColor class.
            </summary>
            <param name="startColor">Start color.</param>
            <param name="middleColor1">Middle color.</param>
            <param name="middleColor2">Middle color.</param>
            <param name="endColor">End color.</param>
            <param name="fillDirection">Fill direction.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.DrawGradient(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the gradient at the specified rectangle to the specified graphics. 
            </summary>
            <param name="gr">Graphics to be gradient drawn.</param>
            <param name="rc">Rectangle to be gradient drawn.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.DrawVistaGradient(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the vista gradient at the specified rectangle to the specified graphics.
            </summary>
            <param name="gr">Graphics to be gradient drawn.</param>
            <param name="rc">Rectangle to be gradient drawn.</param>
            <remarks><b>DrawVistaGradient</b> will use StartColor only to draw gradient.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.CanDraw">
            <summary>
            Determine whether the gradient could be drawn.
            </summary>
            <returns><b>true</b> if the gradient could be drawn, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.ShouldSerializeStartColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.GradientColor.StartColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.ShouldSerializeMiddleColor1">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.GradientColor.StartColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.ShouldSerializeMiddleColor2">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.GradientColor.StartColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.ShouldSerializeEndColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.GradientColor.EndColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.ShouldSerializeFillDirection">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.GradientColor.FillDirection"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientColor.OnPropertyChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Resco.Controls.AdvancedList.GradientColor.PropertyChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Resco.Controls.AdvancedList.GradientColor.PropertyChanged">
            <summary>
            Notify the parent control when some property was changed.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.GradientColor.Empty">
            <summary>
            Represents an empty GradientColor.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.GradientColor.StartColor">
            <summary>
            Gets or sets the starting color of the gradient. 
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.GradientColor.MiddleColor1">
            <summary>
            Gets or sets the middle color of the gradient. 
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.GradientColor.MiddleColor2">
            <summary>
            Gets or sets the middle color of the gradient. 
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.GradientColor.EndColor">
            <summary>
            Gets or sets the ending color of the gradient. 
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.GradientColor.FillDirection">
            <summary>
            Gets or sets the direction of the gradient.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.FillDirection">
            <summary>
            The direction of the gradient will fill.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.FillDirection.Horizontal">
            <summary>
            The fill goes horizontally.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.FillDirection.Vertical">
            <summary>
            The fill goes vertically. 
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.GradientFill.GetAssemblyVersion">
            <summary>
            Gets the current application's or DLL's assembly version.
            </summary>
            <returns>Assembly version.</returns>
        </member>
        <member name="T:Resco.Controls.AdvancedList.PropertyMapping">
            <summary>
            Special <see cref="T:Resco.Controls.AdvancedList.Mapping"/> used for the <see cref="T:Resco.Controls.AdvancedList.BoundRow"/> to map it to any object type.
            </summary>
            <remarks>PropertyMapping is bound to any <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>, and is only wrapper for compatibility with AdvancedList.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.PropertyMapping.#ctor(System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Creates the PropertyMapping wrapper for the specified <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </summary>
            <param name="descriptors">The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> to bound the mapping to.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.PropertyMapping.#ctor(System.Type)">
            <summary>
            Creates the PropertyMapping wrapper for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to bound the mapping to.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.PropertyMapping.GetName(System.Int32)">
            <summary>
            Returns the name of the i-th column in the underlying <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The name of the column or null, if the index is out of range.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.PropertyMapping.GetOrdinal(System.String)">
            <summary>
            Returns the index of the column with given name in the underlying <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The index of the column or -1, if the column is not in the table.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.PropertyMapping.AddColumns(System.String[])">
            <summary>
            It is not possible to add columns to PropertyMapping, use underlying Type to accomplish this taks.
            </summary>
            <param name="names">The names of the columns to add.</param>
        </member>
        <member name="P:Resco.Controls.AdvancedList.PropertyMapping.FieldCount">
            <summary>
            Returns the number of columns of the underlying <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.PropertyMapping.Item(System.Int32)">
            <summary>
            Returns the name of the i-th column in the underlying <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The name of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException">if the index is out of range.</exception>
        </member>
        <member name="P:Resco.Controls.AdvancedList.PropertyMapping.Names">
            <summary>
            Returns the array of column names.
            </summary>
            <remarks>The names can't be changed.</remarks>
        </member>
        <member name="T:Resco.Controls.AdvancedList.ImageCell">
            <summary>
            ImageCell is a Cell used to display images from ImageList.
            </summary>
            <remarks>
            <p>The ImageCell is the <see cref="T:Resco.Controls.AdvancedList.Cell"/> capable to display <see cref="T:System.Drawing.Image"/>s from 
            the <see cref="P:Resco.Controls.AdvancedList.ImageCell.ImageList"/>.</p>
            <p>Displayed image is determined by the constant <see cref="P:Resco.Controls.AdvancedList.ImageCell.ImageIndex"/>, or is taken from
            the <see cref="T:Resco.Controls.AdvancedList.Row"/> when setting the non-constant <see cref="P:Resco.Controls.AdvancedList.Cell.CellSource"/>. 
            Constant image index is useful for button-like cells, preferably in selected row templates, 
            e. g. shopping cart icon on the detail of product info. Non-constant index is useful for giving
            data dependent graphical information, e.g. flags or fancy background, as seen in the packaged 
            <seealso href="http://www.rescodeveloper.net/mobileformstoolkit/advancedlist.aspx">Samples</seealso>. 
            </p>
            <p>Images can be resized to the size of the Cell if the <see cref="!:AutoResize"/> property 
            is set to true, or can be aligned in the cell by the chosen <see cref="T:Resco.Controls.AdvancedList.Alignment"/>. 
            One color can be made transparent by setting the <see cref="!:TransparentColor"/> property 
            (limited on the CompactFramework). Or you can make transparent the color in the pixel (0,0)
            of every image by setting the <see cref="!:AutoTransparent"/> property to true.</p>
            <note>Images from the image list are cached for the better performance, so be sure to 
            set the <see cref="P:Resco.Controls.AdvancedList.ImageCell.ImageList"/> property again, when some changes were made in the 
            image list.</note>
            </remarks>  
            <example>
            This sample shows the generated code to create empty cell with desired properties:
            <sample name="ImageCell">
        <code lang="Visual Basic"><![CDATA[
Dim ImageCell1 As New Resco.Controls.ImageCell
ImageCell1.Alignment = Resco.Controls.Alignment.TopRight
ImageCell1.Bounds = New System.Drawing.Rectangle(200, 0, -1, 16)
ImageCell1.CellSource.ColumnName = "Flag"
ImageCell1.ImageList = this.ImageList2
RowTemplate1.CellTemplates.Add(ImageCell1)
            ]]></code>
        <code lang="C#"><![CDATA[
Resco.Controls.ImageCell imageCell1 = new Resco.Controls.ImageCell();
imageCell1.Alignment = Resco.Controls.Alignment.TopRight;
imageCell1.Bounds = new System.Drawing.Rectangle(200, 0, -1, 16);
imageCell1.CellSource.ColumnName = "Flag";
imageCell1.ImageList = this.ImageList2;
rowTemplate1.CellTemplates.Add(imageCell1);
           ]]></code>
    </sample>
            </example>        
        </member>
        <member name="T:Resco.Controls.AdvancedList.IconCell">
            <summary>
            IconCell is a Cell used to display images.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.IconCell.#ctor">
            <summary>
            Empty constructor, sets default values.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.IconCell.#ctor(Resco.Controls.AdvancedList.IconCell)">
            <summary>
            Copy constructor.
            </summary>
            <param name="cell">The IconCell to create copy from.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.IconCell.Clone">
            <summary>
            Clones the IconCell.
            </summary>
            <remarks>The Cell cannot be used in more then one RowTemplate. 
            Use this method to create the copy of the cell in another template.</remarks>
            <returns>A new IconCell with the same properties as the current IconCell.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.IconCell.GetImage(System.Object)">
            <summary>
            Gets the image based on data and cell source.
            </summary>
            <param name="data">cell display data</param>
            <returns>image to display</returns>
            <remarks><note type="inheritinfo">Override this property if you want to provide 
            custom images, e.g. from database.</note></remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.IconCell.DrawContent(System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Draws the contents of the cell.
            </summary>
            <param name="gr">drawing surface</param>
            <param name="drawbounds">bounds of cell</param>
            <param name="data">data to display</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.IconCell.ShouldSerializeAlignment">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.IconCell.Alignment"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.IconCell.TransparentColor">
            <summary>
            Gets or sets the transparent color.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/>, which is made transparent.</value>
            <remarks>The default value is <see cref="P:System.Drawing.Color.Transparent"/>, which means that
            no color in images is made transparent. Setting this property may not result in the
            desired effect on the Compact Framework due to a use of 
            <see cref="T:System.Drawing.Imaging.ImageAttributes"/>
            to set the color key.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.IconCell.AutoTransparent">
            <summary>
            Gets or sets autotransparency.
            </summary>
            <value> If true, color in in pixel (0,0) of each image is made transparent. </value>
            <remarks>Autotransparency can slow down the drawing of the cell.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.IconCell.AutoResize">
            <summary>
            Gets or sets autoresize. 
            </summary>
            <value>If true, the image is sized to the size of cell.</value>
            <remarks>Due to resizing, the image can be deformed.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.IconCell.Alignment">
            <summary>
            Gets or sets the image alignment.
            </summary>
            <value>The image <see cref="!:Resco.Controls.Alignment"/>.</value>
            <remarks>If the image does not fit to cell, it is cropped.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ImageCell.#ctor">
            <summary>
            Empty constructor, sets default values.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ImageCell.#ctor(Resco.Controls.AdvancedList.ImageCell)">
            <summary>
            Copy constructor.
            </summary>
            <param name="cell">The ImageCell to create copy from.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ImageCell.Clone">
            <summary>
            Clones the ImageCell.
            </summary>
            <remarks>The Cell cannot be used in more then one RowTemplate. 
            Use this method to create the copy of the cell in another template.</remarks>
            <returns>A new ImageCell with the same properties as the current ImageCell.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ImageCell.GetImage(System.Object)">
            <summary>
            Gets the image from image list based on data and cell source.
            Default implementation uses image cache for speedup. 
            </summary>
            <param name="data">cell display data</param>
            <returns>image to display</returns>
            <remarks><note type="inheritinfo">Override this property if you want to provide 
            custom images, e.g. from database.</note></remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ImageCell.ShouldSerializeImageList">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.ImageCell.ImageList"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ImageCell.ImageList">
            <summary>
            Gets or sets the image list.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.ImageList"/> containing the images drawn 
            by the cell.</value>
            <remarks>
            <note>Images from the image list are cached for the better performance, so be sure to 
            set the <see cref="P:Resco.Controls.AdvancedList.ImageCell.ImageList"/> property again, when some changes were made in the 
            image list.</note>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.ImageCell.ImageIndex">
            <summary>
            Gets or sets image index for the cell.
            </summary>
            <value>
            Positive value means constant index in image list.
            Otherwise index in image list is taken from data.
            </value>
            <remarks>By setting the ImageIndex, the <see cref="T:Resco.Controls.AdvancedList.CellSource"/> is changed 
            to <see cref="!:Resco.Controls.CellSourceType.Constant"/>, and contains the image index.</remarks>
        </member>
        <member name="T:Resco.Controls.AdvancedList.IDataConnector">
            <summary>
            Represents a connection to an enumerable data source.
            </summary>
            <remarks>IDataConnector is used to represent forward only readable source of data,
            e.g. taken from IDataReader, XMLReader or FileStream.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.IDataConnector.Open">
            <summary>
            Opens the connection to datasource.
            </summary>
            <remarks>
            When the connection is open, position should be set before the first possible row of data.
            </remarks>
            <returns><c>true</c> when connection is open, otherwise <c>false</c></returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.IDataConnector.Close">
            <summary>
            Close the connection to datasource.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.IDataConnector.MoveNext">
            <summary>
            Advances the position to the next row of data.
            </summary>
            <remarks>MoveNext should be called after <see cref="M:Resco.Controls.AdvancedList.IDataConnector.Open"/> prior to accessing the <see cref="P:Resco.Controls.AdvancedList.IDataConnector.Current"/> data.</remarks>
            <returns><c>true</c> if the next row was loaded, otherwise <c>false</c></returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.IDataConnector.IsOpen">
            <summary>
            Gets the value indicating whether the connection is open.
            </summary>
            <value><c>true</c> when connection is open, otherwise <c>false</c></value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.IDataConnector.Current">
            <summary>
            Gets the current row of data.
            </summary>
            <remarks>
            Current data could be accessed multiple times until the call to a <see cref="M:Resco.Controls.AdvancedList.IDataConnector.MoveNext"/>
            </remarks>
            <value><see cref="T:System.Collections.IList"/> containing the data from the source.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.IDataConnector.Mapping">
            <summary>
            Gets the field mapping of the data.
            </summary>
            <value>The <see cref="P:Resco.Controls.AdvancedList.IDataConnector.Mapping"/> of the data.</value>
        </member>
        <member name="T:Resco.Controls.AdvancedList.DataConnector">
            <summary>
            Basic implementation of IDataConnector which connects to arbitrary database.
            </summary>
            <remarks>
            <p>The <see cref="P:Resco.Controls.AdvancedList.DataConnector.Command"/> property must be set prior to using the 
            <see cref="T:Resco.Controls.AdvancedList.DataConnector"/>.</p>
            <p>DataConnector loads the data from the database using given <see cref="T:System.Data.IDbCommand"/> to get
            <see cref="T:System.Data.IDataReader"/>. If no command is supplied (or created), the <see cref="M:Resco.Controls.AdvancedList.DataConnector.Open"/> method
            will return <c>false</c>.</p>
            <note type="Compact Framework">Current implementation of the DataConnector for 
            the Compact Framework supports CommandText and ConnectionString properties, which can be 
            set in the design time. When the <see cref="P:Resco.Controls.AdvancedList.DataConnector.Command"/> property is not set before setting 
            the CommandText and/or the ConnectionString or before accessing the <see cref="P:Resco.Controls.AdvancedList.DataConnector.Command"/> property,
             DataConnector will attempt to create new instance 
            of the <see cref="!:System.Data.SqlServerCe.SqlCeCommand"/> and 
            the <see cref="!:System.Data.SqlServerCe.SqlCeConnection"/>  from the assembly
            "System.Data.SqlServerCe, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=969db8053d3322ac".
            </note>
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.DataConnector.#ctor">
            <summary>
            Creates DataConnector.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.DataConnector.#ctor(System.Data.IDbCommand)">
            <summary>
            Creates DataConnector with the selected command.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.DataConnector.ToString">
            <summary>
            Returns a String that represents the current DataConnector.
            </summary>
            <returns>A String that represents the current DataConnector.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.DataConnector.Open">
            <summary>
            Opens the connection to datasource.
            </summary>
            <remarks>
            <p>When the connection is open, position is set before the first possible row of data.</p>
            <p>When <c>IDbConnector.Command.Connection.State</c> is <c>ConnectionState.Open</c>, the current
            open connection is reused. It will stay open after calling the <see cref="M:Resco.Controls.AdvancedList.DataConnector.Close"/> method.
            Otherwise new connection to database is made, which is then closed by 
            the <see cref="M:Resco.Controls.AdvancedList.DataConnector.Close"/> method.</p>
            <p>State of DataConnector is not the same as the state of the <c>Command.Connection</c>.
            When <c>Command.Connection</c> was open when calling <see cref="M:Resco.Controls.AdvancedList.DataConnector.Open"/> method, it will 
            stay open after calling the <see cref="M:Resco.Controls.AdvancedList.DataConnector.Close"/> method. Otherwise the 
            <c>Command.Connection</c> will be open/closed with the connector.</p>
            <note>It is required to call the <see cref="M:Resco.Controls.AdvancedList.DataConnector.Close"/> method 
            on the successfully opened connection.</note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when IsOpen is <c>true</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when no command is set, or no connection for the command.</exception>
            <returns><c>true</c> when connection is open, otherwise <c>false</c></returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.DataConnector.Close">
            <summary>
            Close the connection to datasource.
            </summary>
            <remarks>
            <p>State of DataConnector is not the same as the state of the <c>Command.Connection</c>.
            When <c>Connector.Connection</c> was open when calling <see cref="M:Resco.Controls.AdvancedList.DataConnector.Open"/> method, it will 
            stay open after calling the <see cref="M:Resco.Controls.AdvancedList.DataConnector.Close"/> method. Otherwise the 
            <c>Command.Connection</c> will be open/closed with the connector.</p>
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.DataConnector.MoveNext">
            <summary>
            Advances the position to the next row of data.
            </summary>
            <remarks>MoveNext should be called after <see cref="M:Resco.Controls.AdvancedList.DataConnector.Open"/> prior to accessing the <see cref="P:Resco.Controls.AdvancedList.DataConnector.Current"/> data.</remarks>
            <returns><c>true</c> if the next row was loaded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.DataConnector.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the DataConnector and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.DataConnector.Dispose">
            <summary>
            Releases all resources used by the DataConnector.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.DataConnector.Command">
            <summary>
            Gets or sets the <see cref="T:System.Data.IDbCommand"/> used to retrieve data. 
            </summary>
            <remarks>
            <p>The <see cref="P:Resco.Controls.AdvancedList.DataConnector.Command"/> property must be set prior to using the 
            <see cref="T:Resco.Controls.AdvancedList.DataConnector"/>.</p>
            <note type="Compact Framework">In Compact Framework if the <see cref="P:Resco.Controls.AdvancedList.DataConnector.CommandText"/> or 
            the <see cref="P:Resco.Controls.AdvancedList.DataConnector.ConnectionString"/>  is set in designtime or <see cref="P:Resco.Controls.AdvancedList.DataConnector.Command"/> is 
            accessed in runtime and no command is supplied before, the new instance of the 
            <see cref="!:System.Data.SqlServerCe.SqlCeCommand"/> and the 
            <see cref="!:System.Data.SqlServerCe.SqlCeConnection"/> will be created.</note>
            </remarks>
            <example>
            <p>The following example shows the usage of the Command property 
            (we can replace the <see cref="!:System.Data.SqlServerCe.SqlCeCommand"/> with e.g. 
            <see cref="!:System.Data.SqlClient.SqlCommand"/>:</p>
            <sample name="AdvancedList.Load">
        <code lang="Visual Basic"><![CDATA[
Dim myCommand As New System.Data.SqlServerCe.SqlCeCommand("SELECT * FROM customers")
Dim myConnection As New System.Data.SqlServerCe.SqlCeConnection(_
    "DataSource = \\My Documents\\Northwind.sdf")

Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs)    Handles MyBase.Load
    Try
        ' set up the command for the DbConnector (not required, if set in designer)
        myCommand.Connection = myConnection
        AdvancedList1.DbConnector.Command = myCommand

        ' load the data
        AdvancedList1.LoadData()

    Catch ex As System.Data.SqlServerCe.SqlCeException
        MessageBox.Show(ex.Message)
    End Try
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
SqlCeCommand myCommand = new SqlCeCommand("SELECT * FROM customers");
SqlCeConnection myConnection = new SqlCeConnection("DataSource = \\My Documents\\Northwind.sdf");
    
private void Form1_Load(object sender, System.EventArgs e)
{
    try
    {
        // set up the command for the DbConnector (not required, if set in designer)
        myCommand.Connection = myConnection;
        advancedList1.DbConnector.Command = myCommand;

        // load the data
        advancedList1.LoadData();
    }
    catch(SqlCeException ex)
    {
        MessageBox.Show(ex.Message);
    }
}        
            ]]></code>
    </sample>
            </example>
            <value><see cref="T:System.Data.IDbCommand"/> used to retrieve data. Default value is <see langword="null"/></value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.DataConnector.CommandText">
            <summary>
            Gets or sets the command text.
            </summary>
            <remarks>
            <p>When no command is defined, this property has no effect, otherwise it is a shortcut property
            for access to the <see cref="P:System.Data.IDbCommand.CommandText"/> property of the <see cref="P:Resco.Controls.AdvancedList.DataConnector.Command"/>.</p>
            <note type="Compact Framework">This property is used in the design time for 
            the Compact Framework to set up the command text. If it is set in the runtime,
            and no command was supplied, then new instance of the 
            <see cref="!:System.Data.SqlServerCe.SqlCeCommand"/> and the 
            <see cref="!:System.Data.SqlServerCe.SqlCeConnection"/> is created.
            </note></remarks>
            <example>
            <code>AdvancedList1.DbConnector.CommandText = "SELECT * FROM customers" &amp; orderBy</code>
            </example>
            <value>The command text for the <see cref="P:Resco.Controls.AdvancedList.DataConnector.Command"/>, 
            default value is <see cref="F:System.String.Empty"/></value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.DataConnector.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <remarks>
            <p>When no command is defined, this property has no effect, otherwise it is a shortcut property
            for access to the <c>Connection.ConnectionString</c> property of the <see cref="P:Resco.Controls.AdvancedList.DataConnector.Command"/>.</p>
            <note type="Compact Framework">This property is used in the design time for 
            the Compact Framework to set up the connection string. If it is set in the runtime,
            and no command was supplied, then new instance of the 
            <see cref="!:System.Data.SqlServerCe.SqlCeCommand"/> and the 
            <see cref="!:System.Data.SqlServerCe.SqlCeConnection"/> is created.
            </note></remarks>
            <value>The connection string for the Connection of the <see cref="P:Resco.Controls.AdvancedList.DataConnector.Command"/>, 
            default value is <see cref="F:System.String.Empty"/></value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.DataConnector.IsOpen">
            <summary>
            Gets the value indicating whether the DataConnector is open.
            </summary>
            <remarks>
            <p>When DataConnector is open, it is required to call <see cref="M:Resco.Controls.AdvancedList.DataConnector.Close"/> method
            before another call to <see cref="M:Resco.Controls.AdvancedList.DataConnector.Open"/> method.</p>
            <p>State of DataConnector is not the same as the state of the <c>Command.Connection</c>.
            When <c>Connector.Connection</c> was open when calling <see cref="M:Resco.Controls.AdvancedList.DataConnector.Open"/> method, it will 
            stay open after calling the <see cref="M:Resco.Controls.AdvancedList.DataConnector.Close"/> method. Otherwise the 
            <c>Command.Connection</c> will be open/closed with the connector.</p>
            </remarks>
            <value><c>true</c> when connection is open, otherwise <c>false</c></value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.DataConnector.Current">
            <summary>
            Gets the current row of data.
            </summary>
            <remarks>
            Current data can be accessed multiple times until the call to a <see cref="M:Resco.Controls.AdvancedList.DataConnector.MoveNext"/> method.
            </remarks>
            <value><see cref="T:System.Collections.IList"/> containing the data from the source.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.DataConnector.Mapping">
            <summary>
            Gets the field mapping of the data.
            </summary>
            <value>The <see cref="P:Resco.Controls.AdvancedList.DataConnector.Mapping"/> of the data.</value>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CellSource">
            <summary>
            Cell source defines where the Cell takes data from.
            </summary>
            <remarks>
            <p>The cell source type is determined by the <see cref="P:Resco.Controls.AdvancedList.CellSource.SourceType"/> property.
            It is changed when setting one of the <see cref="P:Resco.Controls.AdvancedList.CellSource.ConstantData"/>, <see cref="P:Resco.Controls.AdvancedList.CellSource.ColumnIndex"/> or 
            <see cref="P:Resco.Controls.AdvancedList.CellSource.ColumnName"/> properties.</p>
            <p>When source type is <see cref="F:Resco.Controls.AdvancedList.CellSourceType.Constant"/>, the <see cref="T:Resco.Controls.AdvancedList.Cell"/>
            displays the content of <see cref="P:Resco.Controls.AdvancedList.CellSource.ConstantData"/> property instead of data from row. 
            <see cref="T:Resco.Controls.AdvancedList.ImageCell"/> uses this property as a constant <see cref="P:Resco.Controls.AdvancedList.ImageCell.ImageIndex"/>.</p>
            <p>When source type is <see cref="F:Resco.Controls.AdvancedList.CellSourceType.ColumnIndex"/>, the <see cref="T:Resco.Controls.AdvancedList.Cell"/> 
            displays the content of the <see cref="P:Resco.Controls.AdvancedList.CellSource.ColumnIndex"/>-th field in the data row. If it is -1, then
            the index of the <see cref="T:Resco.Controls.AdvancedList.Cell"/> is used.</p>
            <p>When source type is <see cref="F:Resco.Controls.AdvancedList.CellSourceType.ColumnName"/>, the <see cref="T:Resco.Controls.AdvancedList.Cell"/> 
            displays the content of the field with name from the <see cref="P:Resco.Controls.AdvancedList.CellSource.ColumnName"/> property.</p>
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CellSource.#ctor">
            <summary>
            Creates empty cell source, cell is bound to column index -1
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CellSource.Copy">
            <summary>
            Creates a copy of this CellSource instance.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CellSource.ShouldSerializeConstantData">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.CellSource.ConstantData"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CellSource.ShouldSerializeColumnIndex">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.CellSource.ColumnIndex"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CellSource.ShouldSerializeColumnName">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.CellSource.ColumnName"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CellSource.ToString">
            <summary>
            Converts the cell source to readable form
            </summary>
            <returns>Textual representation of cell source</returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CellSource.SourceType">
            <summary>
            Gets the type of cell source.
            </summary>
            <remarks>The cell source type is changed when setting one of the <see cref="P:Resco.Controls.AdvancedList.CellSource.ConstantData"/>, 
            <see cref="P:Resco.Controls.AdvancedList.CellSource.ColumnIndex"/> or <see cref="P:Resco.Controls.AdvancedList.CellSource.ColumnName"/> properties.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CellSource.ConstantData">
            <summary>
            Gets or sets constant data cell source.
            </summary>
            <remarks>
            <p>Setting this property will change the <see cref="P:Resco.Controls.AdvancedList.CellSource.SourceType"/> to 
            <see cref="F:Resco.Controls.AdvancedList.CellSourceType.Constant"/>.</p>
            <p>When source type is <see cref="F:Resco.Controls.AdvancedList.CellSourceType.Constant"/>, the <see cref="T:Resco.Controls.AdvancedList.Cell"/>
            displays the content of <see cref="P:Resco.Controls.AdvancedList.CellSource.ConstantData"/> property instead of data from row. 
            <see cref="T:Resco.Controls.AdvancedList.ImageCell"/> uses this property as a constant <see cref="P:Resco.Controls.AdvancedList.ImageCell.ImageIndex"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CellSource.ColumnIndex">
            <summary>
            Gets or sets column index for cell source.
            </summary>
            <remarks>
            <p>Setting this property will change the <see cref="P:Resco.Controls.AdvancedList.CellSource.SourceType"/> to 
            <see cref="F:Resco.Controls.AdvancedList.CellSourceType.ColumnIndex"/>.</p>
            <p>When source type is <see cref="F:Resco.Controls.AdvancedList.CellSourceType.ColumnIndex"/>, the <see cref="T:Resco.Controls.AdvancedList.Cell"/> 
            displays the content of the <see cref="P:Resco.Controls.AdvancedList.CellSource.ColumnIndex"/>-th field in the data row. 
            If it is -1, then the index of the <see cref="T:Resco.Controls.AdvancedList.Cell"/> is used.</p>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CellSource.ColumnName">
            <summary>
            Gets or sets column name for cell source.
            </summary>
            <remarks>
            <p>Setting this property will change the <see cref="P:Resco.Controls.AdvancedList.CellSource.SourceType"/> to 
            <see cref="F:Resco.Controls.AdvancedList.CellSourceType.ColumnName"/>.</p>
            <p>When source type is <see cref="F:Resco.Controls.AdvancedList.CellSourceType.ColumnName"/>, the <see cref="T:Resco.Controls.AdvancedList.Cell"/> 
            displays the content of the field with name from the <see cref="P:Resco.Controls.AdvancedList.CellSource.ColumnName"/> property.</p>
            </remarks>
        </member>
        <member name="T:Resco.Controls.AdvancedList.TemplateSet">
            <summary>
            TemplateSet is the collection of <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/>s.
            </summary>
            <remarks>
            <p>TemplateSet is derived from <see cref="T:System.Collections.CollectionBase"/> and supports <see cref="M:Resco.Controls.AdvancedList.TemplateSet.Add(Resco.Controls.AdvancedList.RowTemplate)"/>, 
            <see cref="M:Resco.Controls.AdvancedList.TemplateSet.Insert(System.Int32,Resco.Controls.AdvancedList.RowTemplate)"/> and <see cref="M:Resco.Controls.AdvancedList.TemplateSet.Remove(Resco.Controls.AdvancedList.RowTemplate)"/> methods.
            The <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> can only be in one TemplateSet at a time. Whether the RowTemplate 
            is in collection can be determined by the <see cref="M:Resco.Controls.AdvancedList.TemplateSet.Contains(Resco.Controls.AdvancedList.RowTemplate)"/> method.
            The index of the template can be determined by the <see cref="M:Resco.Controls.AdvancedList.TemplateSet.IndexOf(Resco.Controls.AdvancedList.RowTemplate)"/> method. 
            Template set can be accessed through the indexers by the row template index or name. 
            </p>
            <p>You can have more prepared template sets and use them through the 
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.Templates"/> property of the <see cref="T:Resco.Controls.AdvancedList.AdvancedList"/>.</p>
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.Add(Resco.Controls.AdvancedList.RowTemplate)">
            <summary>
            Adds a RowTemplate to the end of the TemplateSet.
            </summary>
            <param name="value">The <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> to be added to the end of the TemplateSet.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.IndexOf(Resco.Controls.AdvancedList.RowTemplate)">
            <summary>
            Searches for the specified RowTemplate and returns the zero-based index of the first occurrence within the entire TemplateSet.
            </summary>
            <param name="value">The RowTemplate to locate in the TemplateSet.</param>
            <returns>The zero-based index of the first occurrence of value within the entire TemplateSet, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.Insert(System.Int32,Resco.Controls.AdvancedList.RowTemplate)">
            <summary>
            Inserts an element into the TemplateSet at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The RowTemplate to insert.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.Remove(Resco.Controls.AdvancedList.RowTemplate)">
            <summary>
            Removes the first occurrence of a specific RowTemplate from the TemplateSet.
            </summary>
            <param name="value">The RowTemplate to remove from the TemplateSet.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.Contains(Resco.Controls.AdvancedList.RowTemplate)">
            <summary>
            Determines whether the TemplateSet contains a specific element.
            </summary>
            <param name="value">The Object to locate in the TemplateSet.</param>
            <returns>true if the TemplateSet contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the TemplateSet.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.OnClear">
            <summary>
            Performs additional custom processes when clearing the contents of the TemplateSet.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of the TemplateSet.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an element from the TemplateSet.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes after setting a value in the TemplateSet.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.#ctor">
            <summary>
            Initializes a new instance of the TemplateSet class.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.TemplateSet.Clone">
            <summary>
            Creates a copy of the current TemplateSet.
            </summary>
            <returns>The copy of the current TemplateSet.</returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TemplateSet.Parent">
            <summary>
            Parent list of the template set.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TemplateSet.Item(System.Int32)">
            <summary>
            Gets or sets the row template for the given template index.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.TemplateSet.Item(System.String)">
            <summary>
            Gets the first row template with the given name.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.RowTemplate">
            <summary>
            RowTemplate is the template for displaying Row of data.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.RowTemplate.Parent">
            <summary>
            The reference to parent AdvancedList
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.RowTemplate.CurrentRow">
            <summary>
            During drawing contains the reference to current row.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.ToString">
            <summary>
            Returns a String that represents the current RowTemplate.
            </summary>
            <returns>A String that represents the current RowTemplate.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.#ctor">
            <summary>
            Creates the new instance of RowTemplate.
            </summary>
            <remarks>Constructor sets the default values,
            default height of 16, background of the <see cref="P:System.Drawing.SystemColors.ControlLightLight"/> color
            and foreground of the <see cref="P:System.Drawing.SystemColors.ControlText"/> color.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing"><b>true</b> if managed resources should be disposed; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.Clone">
            <summary>
            Creates a copy of the current RowTemplate.
            </summary>
            <returns>The copy of the current RowTemplate.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.Draw(System.Drawing.Graphics,System.Int32,System.Int32,Resco.Controls.AdvancedList.Row,System.Int32,System.Int32)">
            <summary>
            Draws the Row on given offset with given maximal width.
            </summary>
            <param name="gr">Graphics to draw.</param>
            <param name="xOffset">Offset from the left.</param>
            <param name="yOffset">Offset from the top.</param>
            <param name="row">Row with the data to display.</param>
            <param name="width">Width of the control.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.GetHeight(Resco.Controls.AdvancedList.Row)">
            <summary>
            Get the height for the given row, with respect to autoheight.
            </summary>
            <param name="row">Row displayed.</param>
            <returns>Current height of the row when displayed by this template.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.ShouldSerializeGradientBackColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.RowTemplate.GradientBackColor"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.ResetGradientBackColor">
            <summary>
            Resets the <see cref="P:Resco.Controls.AdvancedList.RowTemplate.GradientBackColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.OnChange(System.Object,Resco.Controls.AdvancedList.GridEventArgsType,System.Object)">
            <summary>
            Raises the Changed event to repaint the parent control.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.OnCellEntered(Resco.Controls.AdvancedList.CellEnteredMainEventArgs)">
            <summary>
            Fires the <see cref="!:AdvancedList.Cell.CellEntered"/> event for an individual cell.
            </summary>
            <param name="sender">Object that raised the event i.e. RowTemplate.</param>
            <param name="e">Arguments for this event handler.</param>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.Default">
            <summary>
            Gets the default row template, which is actualy empty template.
            </summary>
            <value>The empty default template.</value>
            <remarks>This value is used to draw incorrectly mapped rows. It has no Cells,
            default height of 16, background of the <see cref="P:System.Drawing.SystemColors.ControlLightLight"/> color
            and foreground of the <see cref="P:System.Drawing.SystemColors.ControlText"/> color.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.Name">
            <summary>
            Gets or sets the name of the RowTemplate.
            </summary>
            <value>The name of the RowTemplate</value>
            <remarks>Reserved for future use.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.CellTemplates">
            <summary>
            Gets the <see cref="T:Resco.Controls.AdvancedList.RowTemplate.CellCollection"/> which contains Cells to display values.
            </summary>
            <value>The <see cref="T:Resco.Controls.AdvancedList.RowTemplate.CellCollection"/>.</value>
            <remarks><p>CellCollection stores the <see cref="T:Resco.Controls.AdvancedList.Cell"/>s, that are part of this row template
            and are essential in displaying informations in the <see cref="T:Resco.Controls.AdvancedList.AdvancedList"/>.</p>
            <p>Use the indexer <see cref="P:Resco.Controls.AdvancedList.RowTemplate.Item(System.Int32)"/> instead of this property for quick access.</p>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.Item(System.Int32)">
            <summary>
            Gets or sets the Cell at the given index.
            </summary>
            <value>The <see cref="T:Resco.Controls.AdvancedList.Cell"/> at the given index.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.Item(System.String)">
            <summary>
            Gets or sets the Cell with the given name.
            </summary>
            <value>The <see cref="T:Resco.Controls.AdvancedList.Cell"/> with the given name.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.Height">
            <summary>
            Gets or sets the height of the RowTemplate.
            </summary>
            <value>The height of the RowTemplate.</value>
            <remarks></remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.BackColor">
            <summary>
            Gets or sets the background color of the RowTemplate.
            </summary>
            <value>The background <see cref="T:System.Drawing.Color"/> of the RowTemplate.</value>
            <remarks>The row background is drawn with this color.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.ForeColor">
            <summary>
            Gets or sets the foreground color for the RowTemplate.
            </summary>
            <value>The foreground <see cref="T:System.Drawing.Color"/> for the RowTemplate.</value>
            <remarks>
            RowTemplates ForeColor is used by the Cell when its <see cref="P:Resco.Controls.AdvancedList.Cell.ForeColor"/> is set 
            to <see cref="P:System.Drawing.Color.Transparent"/>.
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.GradientBackColor">
            <summary>
            Get or sets the gradient back color.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.RowTemplate.CellCollection">
            <summary>
            Collection of <see cref="T:Resco.Controls.AdvancedList.Cell"/>s in <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/>.
            </summary>
            <remarks>
            <p>CellCollection is derived from <see cref="T:System.Collections.CollectionBase"/> and supports <see cref="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.Add(Resco.Controls.AdvancedList.Cell)"/>, 
            <see cref="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.Insert(System.Int32,Resco.Controls.AdvancedList.Cell)"/> and <see cref="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.Remove(Resco.Controls.AdvancedList.Cell)"/> methods.
            The <see cref="T:Resco.Controls.AdvancedList.Cell"/> can only be in one <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> at a time. 
            Whether the cell is in collection can be determined by the <see cref="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.Contains(Resco.Controls.AdvancedList.Cell)"/> method.
            The index of the cell can be determined by the <see cref="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.IndexOf(Resco.Controls.AdvancedList.Cell)"/> method. 
            CellCollection can be accessed through the indexer by the cell index. 
            </p>
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.#ctor(Resco.Controls.AdvancedList.RowTemplate)">
            <summary>
            Creates new CellCollection for the RowTemplate.
            </summary>
            <param name="rt">The RowTemplate which owns the cell collection</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.Add(Resco.Controls.AdvancedList.Cell)">
            <summary>
            Adds a Cell to the end of the CellCollection.
            </summary>
            <param name="value">The RowTemplate to be added to the end of the CellCollection.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.IndexOf(Resco.Controls.AdvancedList.Cell)">
            <summary>
            Searches for the specified Cell and returns the zero-based index of the first occurrence within the entire CellCollection.
            </summary>
            <param name="value">The Cell to locate in the CellCollection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire CellCollection, if found; otherwise, -1.</returns>	
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.Insert(System.Int32,Resco.Controls.AdvancedList.Cell)">
            <summary>
            Inserts an element into the CellCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The Cell to insert.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.Remove(Resco.Controls.AdvancedList.Cell)">
            <summary>
            Removes the first occurrence of a specific Cell from the CellCollection.
            </summary>
            <param name="value">The Cell to remove from the CellCollection.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.Contains(Resco.Controls.AdvancedList.Cell)">
            <summary>
            Determines whether the CellCollection contains a specific element.
            </summary>
            <param name="value">The Cell to locate in the CellCollection.</param>
            <returns>true if the CellCollection contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.OnInsert(System.Int32,System.Object)">
            <summary>
             Performs additional custom processes before inserting a new element into the CellCollection.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param> 
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the CellCollection.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param> 
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes when setting a value in the CellCollection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes after setting a value in the CellCollection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an element from the CellCollection.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.OnClear">
            <summary>
            Performs additional custom processes when clearing the contents of the CellCollection.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowTemplate.CellCollection.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of the CellCollection.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.CellCollection.Item(System.Int32)">
            <summary>
            Gets the Cell at the specified index. 
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowTemplate.CellCollection.Item(System.String)">
            <summary>
            Gets the Cell with the specified name. 
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.Links">
            <summary>
            Summary description for Links.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Design.ALXmlSerializer.XmlSerialize(System.Xml.XmlWriter,System.Windows.Forms.Control)">
            <summary>
            Performs serialization of AdvancedList object into an XML file.
            </summary>
            <param name="writer">XmlWriter object that will be used to write the xml data into.</param>
            <param name="advancedList">AdvancedList object that will be serialized.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Design.ALXmlSerializer.SaveXml(System.String,System.Windows.Forms.Control)">
            <summary>
            This method is the Xml serialization starting point. It calls 
            <see cref="!:ALXmlSerializer.XmlSerialize(XmlWriter, AdvancedList)"/> via
            <see cref="!:ALXmlSerializer.SaveXml(string, AdvancedList)"/> method. 
            </summary>
            <param name="fileName">The name of the output XML file.</param>
            <param name="advancedList">AdvancedList ojbect that will be serialized.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Design.ALXmlSerializer.SaveXml(System.Xml.XmlWriter,System.Windows.Forms.Control)">
            <summary>
            Saves the AdvancedList object into XmlWriter object.
            </summary>
            <param name="writer">XmlWriter object to write XML data to.</param>
            <param name="advancedList">AdvancedList object that will be serialized.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Design.ALXmlSerializer.SerializeCollection(System.Xml.XmlWriter,System.Object)">
            <summary>
            Saves an IEnumerable object's objects into a XmlWriter object.
            </summary>
            <remarks>
            This method takes a IEnumerable object as an input and a XmlWriter object that will be used to
            write the XML data into. It then enumerates through the IEnumerable saving every object's properties
            into an XML file.
            </remarks>
            <param name="writer">XmlWriter object to write the xml data into.</param>
            <param name="data">An IEnumerable object to enumerate through.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Design.ALXmlSerializer.SerializeCell(System.Xml.XmlWriter,System.Object)">
            <summary>
            This method is used to serialize the <see cref="!:AdvancedList.Cell"/> object.
            </summary>
            <remarks>
            The reason why a Cell is serialized differently from other objects is that there may be different
            types of cells (e.g. TextCell, ImageCell, ...) and the type of the cell is saved as an attribute of
            a &lt;Cell&gt; element.
            </remarks>
            <param name="writer">An XmlWriter object to save the XML data to. </param>
            <param name="cell">A Cell object whose properties will be serialized.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Design.ALXmlSerializer.SerializeObjectsProperties(System.Xml.XmlWriter,System.Object)">
            <summary>
            Serializes object's properties into an XML file.
            </summary>
            <remarks>
            The method first gets all the properties of an object that have Browsable attribute set.
            Then if the properties do not have default values, then they are serialized. However, there are
            a few exceptions. Normally those properties that have DesignerSerializationVisibility set to Content
            are not serialized. But if they implement the IEnumerable interface then they are serialized.
            RowTemplate object is an exception to this - it does not get serialized even though it does implement
            IEnumerable. Furthermore, CellSource object does get serialized even though its
            DesignerSerializationVisibility attribute is set to Content and it does not implement IEnumerable.
            </remarks>
            <param name="writer">XmlWriter object to write XML data into.</param>
            <param name="o">Object to serialize.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Conversion.ColorFromString(System.String)">
            <summary>
            Converts string representation of color to <see cref="T:System.Drawing.Color"/>.
            </summary>
            <remarks>The function searches first known colors, then system colors
            and then tries to convert the color from ARGB integer (hexadecimal).</remarks>
            <example>
            <p>Known colors: <c>Conversion.ColorFromString("Gray")</c></p>
            <p>System colors: <c>Conversion.ColorFromString("Control")</c></p>
            <p>ARGB value: <c>Conversion.ColorFromString("FF808080")</c></p>
            </example>
            <param name="sColor">String representation of color.</param>
            <returns><see cref="T:System.Drawing.Color"/> converted from string representation.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Conversion.RectangleFromString(System.String)">
            <summary>
            Converts string representation of rectangle to <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <remarks>The function converts the comma separated values of X,Y,Width,Height.</remarks>
            <example>
            <p>Rectangle: <c>Conversion.ColorFromRectangle("0,0,50,16")</c></p>
            </example>
            <param name="sRect">String representation of rectangle.</param>
            <returns><see cref="T:System.Drawing.Rectangle"/> converted from string representation.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Conversion.FontFromString(System.String)">
            <summary>
            Converts string representation of font to <see cref="T:System.Drawing.Font"/>.
            </summary>
            <param name="sFont">String representation of font.</param>
            <returns><see cref="T:System.Drawing.Font"/> converted from string representation.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Conversion.EnumFromString(System.Type,System.String)">
            <summary>
            Converts string representation of enumeration values to <see cref="T:System.Enum"/>.
            </summary>
            <remarks>The function converts the string representing the value from the enumeration.</remarks>
            <note type="caution">On compact framework the flags are not supported.</note>
            <example>
            <p>Alignment: <c>Conversion.ColorFromRectangle(typeof(Resco.Controls.Alignment),"BottomLeft")</c></p>
            </example>
            <param name="sValue">String representation of rectangle.</param>
            <param name="enumType">Type of enumeration</param>
            <returns>Value of type <paramref name="enumType"/> converted from string representation.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Conversion.StringDataFromString(System.String)">
            <summary>
            Converts the data from the comma separated strings to string array. 
            </summary>
            <param name="sData">Comma separated strings.</param>
            <returns>Array of strings.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Conversion.CellSourceFromString(System.String)">
            <summary>
            Converts the data from the string to cell source. 
            </summary>
            <seealso cref="T:Resco.Controls.AdvancedList.CellSource"/>
            <param name="sData">String representing the cell source.</param>
            <returns><see cref="T:Resco.Controls.AdvancedList.CellSource"/> corresponding to <paramref name="sData"/>.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Conversion.GradientColorFromString(System.String)">
            <summary>
            Converts string representation of GradientColor to <see cref="T:Resco.Controls.AdvancedList.GradientColor"/>.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Conversion.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the property of object.
            </summary>
            <remarks>Handles special types of properties: Colors, Rectangles and CellSource.</remarks>
            <param name="obj">Object to apply.</param>
            <param name="name">Name of the property.</param>
            <param name="value">New value of the property.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.Conversion.SetProperty(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Sets the property of object.
            </summary>
            <remarks>Handles special types of properties: Colors, Rectangles and CellSource.</remarks>
            <param name="obj">Object to apply.</param>
            <param name="name">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <param name="type">Type of the property.</param>
        </member>
        <member name="T:Resco.Controls.AdvancedList.ColorCategory">
            <summary>
            Category of color information.
            </summary>
            <remarks>
            ColorCategory is used as a parameter for the <see cref="M:Resco.Controls.AdvancedList.Cell.GetColor(Resco.Controls.AdvancedList.ColorCategory)"/> method.
            Returned color will belong to demanded category, e.g. for the <see cref="T:Resco.Controls.AdvancedList.LinkCell"/> color
            for the <see cref="F:Resco.Controls.AdvancedList.ColorCategory.Foreground"/> is dependent on the link state.
            </remarks>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ColorCategory.Background">
            <summary>
            Denotes the background color.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ColorCategory.Foreground">
            <summary>
            Denotes the foreground color.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ColorCategory.BorderFlat">
            <summary>
            Denotes the flat border color, default is <c>SystemColors.ControlDark</c>.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ColorCategory.BorderHighlight">
            <summary>
            Denotes the highlight color of border, default is <c>SystemColors.ControlDarkDark</c>.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ColorCategory.BorderShadow">
            <summary>
            Denotes the shadow color of border, default is <c>SystemColors.ControlLightLight</c>.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.BorderType">
            <summary>
            Border of cell.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.BorderType.None">
            <summary>
            Without border.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.BorderType.Flat">
            <summary>
            Light border, flat looking, with color from category <see cref="F:Resco.Controls.AdvancedList.ColorCategory.BorderFlat"/>.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.BorderType.Inset">
            <summary>
            Inset border, for pushed in cells. Top and left has  color from category 
            <see cref="F:Resco.Controls.AdvancedList.ColorCategory.BorderShadow"/>, bottom and right from category 
            <see cref="F:Resco.Controls.AdvancedList.ColorCategory.BorderHighlight"/>. 
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.BorderType.Raised">
            <summary>
            Raised border, for pulled out cells. Top and left has  color from category 
            <see cref="F:Resco.Controls.AdvancedList.ColorCategory.BorderHighlight"/>, bottom and right from category 
            <see cref="F:Resco.Controls.AdvancedList.ColorCategory.BorderShadow"/>. 
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.SelectionMode">
            <summary>
            Selection mode of advanced list
            </summary>
            <remarks>
            <p>
            If selection mode is set to <see cref="!:Resco.Controls.SelectionMode.SelectOnly"/>, 
            by clicking not selected row, it is selected. When clicking selected row, 
            no action is taken.
            </p>
            <p>
            If selection mode is set to <see cref="!:Resco.Controls.SelectionMode.SelectDeselect"/>, 
            by clicking not selected row, it is selected. When clicking selected row, 
            it is deselected.
            </p>
            </remarks>
        </member>
        <member name="F:Resco.Controls.AdvancedList.SelectionMode.SelectOnly">
            <summary>
            Row is selected on click.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.SelectionMode.SelectDeselect">
            <summary>
            Row is selected or deselected on click.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.SelectionMode.NoSelect">
            <summary>
            Row is not selected on click.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.Alignment">
            <summary>
            Defines the alignment of text, image or other content.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Alignment.TopLeft">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned on the left.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Alignment.MiddleLeft">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the left.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Alignment.BottomLeft">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the left.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Alignment.TopCenter">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Alignment.MiddleCenter">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Alignment.BottomCenter">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Alignment.TopRight">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Alignment.MiddleRight">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Alignment.BottomRight">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.SeparatorType">
            <summary>
            Type of separator in separator cell.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.SeparatorType.Empty">
            <summary>
            Empty separator without line.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.SeparatorType.Horizontal">
            <summary>
            Separator with vertical line, separates cells horizontally.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.SeparatorType.Vertical">
            <summary>
            Separator with horizontal line, separates cells vertically.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.ToolTipType">
            <summary>
            Type of tooltip when the text does not fit.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ToolTipType.Triangle">
            <summary>
            Displays triangle.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ToolTipType.Dots">
            <summary>
            Displays three dots.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.RowAddingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowAdding"/> event.
            </summary>
            <param name="sender">Object that raised the event i.e. AdvancedList.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="T:Resco.Controls.AdvancedList.RowAddingEventArgs">
            <summary>
            Represents arguments for <see cref="!:AdvancedList.RowAddingEventHandler"/> delegate.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowAddingEventArgs.Row">
            <summary>
            Sets a row that will be added into AdvancedList's RowColection.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowAddingEventArgs.RowIndex">
            <summary>
            Gets an index of a row that is about to be added.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.DataLoadedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:AdvancedComboBox.DataLoaded"/> event.
            </summary>
            <param name="sender">Object that raised the event i.e. AdvancedComboBox.</param>
            <param name="e">Arguments of this event.</param>
            <seealso cref="T:Resco.Controls.AdvancedList.DataLoadedEventArgs"/>
        </member>
        <member name="T:Resco.Controls.AdvancedList.DataLoadedEventArgs">
            <summary>
            Contains arguments for <see cref="T:Resco.Controls.AdvancedList.DataLoadedEventHandler"/> delegate.
            </summary>
            <seealso cref="!:AdvancedComboBox.Cell.DataLoaded"/>
            <seealso cref="!:AdvancedComboBox.DataLoadedEventHandler"/>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CellEnteredMainEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.CellEntered"/> event.
            </summary>
            <remarks>
            When delayed load is complete, LoadComplete property is set to true.
            </remarks>
            <param name="sender">Object that raised the event i.e. AdvancedList.</param>
            <param name="e">Arguments of this event.</param>
            <seealso cref="!:AdvancedList.CellEnteredMainEventArgs"/>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CellEnteredMainEventArgs">
            <summary>
            Represents arguments for <see cref="!:AdvancedList.CellEnteredMainEventHandler"/> delegate.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CellEnteredMainEventArgs.#ctor(Resco.Controls.AdvancedList.Cell,System.Int32,Resco.Controls.AdvancedList.Row)">
            <summary>
            Constructs a CellEnteredMainEventArgs object.
            </summary>
            <param name="cell">Reference to the cell that was entered.</param>
            <param name="iCellIndex">Index of the cell in its 
            <param name="r">Row that was clicked.</param>
            <see cref="!:AdvancedList.RowTemplate.CellCollection"/></param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CellEnteredMainEventArgs.#ctor">
            <summary>
            Constructs an empty CellEnteredMainEventArgs object.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CellEnteredMainEventArgs.Cell">
            <summary>
            Gets or sets the reference to the cell that was entered.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CellEnteredMainEventArgs.CellIndex">
            <summary>
            Gets or sets the index of the cell in its <see cref="!:AdvancedList.RowTemplate.CellCollection"/>.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CellEnteredMainEventArgs.Row">
            <summary>
            Gets or sets the row that was used to display the data from.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CellEnteredEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:AdvancedList.Cell.CellEntered"/> event.
            </summary>
            <param name="sender">Object that raised the event i.e. AdvancedList.</param>
            <param name="e">Arguments of this event.</param>
            <seealso cref="!:AdvancedList.CellEnteredEventArgs"/>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CellEnteredEventArgs">
            <summary>
            Contains arguments for <see cref="T:Resco.Controls.AdvancedList.CellEnteredEventHandler"/> delegate.
            </summary>
            <seealso cref="!:AdvancedList.Cell.CellEntered"/>
            <seealso cref="!:AdvancedList.CellEnteredEventHandler"/>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CellEnteredEventArgs.#ctor(Resco.Controls.AdvancedList.Cell,Resco.Controls.AdvancedList.Row,System.Object)">
            <summary>
            Constructs the CellEnteredEventArgs object.
            </summary>
            <param name="c">Cell that was entered.</param>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CellEnteredEventArgs.Cell">
            <summary>
            Gets the cell that was entered.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CellEnteredEventArgs.Row">
            <summary>
            Gets the row which displayed data was taken from.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CellEnteredEventArgs.Data">
            <summary>
            Gets the data displayed by the cell.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.RowEnteredEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowEntered"/> event.
            </summary>
            <param name="sender">Object that raised the event i.e. AdvancedList.</param>
            <param name="e">Arguments of this event.</param>
            <seealso cref="E:Resco.Controls.AdvancedList.AdvancedList.RowEntered"/>
        </member>
        <member name="T:Resco.Controls.AdvancedList.RowEnteredEventArgs">
            <summary>
            RowEnteredEventArgs class contains the arguments for <see cref="!:AdvancedList.RowEnteredEventHandler"/>
            delegate.
            </summary>
            <seealso cref="E:Resco.Controls.AdvancedList.AdvancedList.RowEntered"/>
            <seealso cref="!:AdvancedList.RowEnteredEventHandler"/>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowEnteredEventArgs.#ctor(Resco.Controls.AdvancedList.Row,System.Int32)">
            <summary>
            Constructs the RowEnteredEventArgs object.
            </summary>
            <param name="r">Reference of the row that was entered.</param>
            <param name="iRowIndex">Index of the entered row in AdvancedList's row collection.</param>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowEnteredEventArgs.Row">
            <summary>
            Gets the reference of the entered row.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.RowEnteredEventArgs.RowIndex">
            <summary>
            Gets the index of the entered row.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.RowEventHandler">
            <summary>
            Represents the method that will handle the row click event.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.RowEventArgs">
            <summary>
            RowEventArgs class contains the arguments of RowEventHandler delegate.
            </summary>
            <remarks>
            RowEventArgs are arguments for the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.RowSelect"/> event.
            The data provided to the handler consist of the <see cref="F:Resco.Controls.AdvancedList.RowEventArgs.DataRow"/>, that was 
            affected by the event, <see cref="F:Resco.Controls.AdvancedList.RowEventArgs.RowIndex"/> of this row and the <see cref="F:Resco.Controls.AdvancedList.RowEventArgs.Offset"/>
            of the row from the top of the screen.
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.RowEventArgs.#ctor(Resco.Controls.AdvancedList.Row,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the RowEventArgs class.
            </summary>
            <param name="r">The row that was clicked.</param>
            <param name="i">An index of the row in row collection.</param>
            <param name="yoff">Current vertical offset of the row in grid.</param>
        </member>
        <member name="F:Resco.Controls.AdvancedList.RowEventArgs.DataRow">
            <summary>
            The <see cref="T:Resco.Controls.AdvancedList.Row"/> that was clicked.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.RowEventArgs.RowIndex">
            <summary>
            An index of the row in the <see cref="T:Resco.Controls.AdvancedList.RowCollection"/>. -1 for HeaderRow, -2 for FooterRow.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.RowEventArgs.Offset">
            <summary>
            Current vertical offset of the row in grid.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CellEventHandler">
            <summary>
            Represents the method that will handle the cell click event.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CellEventArgs">
            <summary>
            CellEventArgs class contains the arguments of CellEventHandler delegate.
            </summary>
            <remarks>
            CellEventArgs are arguments for the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.CellClick"/> and the 
            <see cref="E:Resco.Controls.AdvancedList.AdvancedList.HeaderClick"/> event. They extend the <see cref="T:Resco.Controls.AdvancedList.RowEventArgs"/>.
            The data provided to the handler are extended with the affected <see cref="F:Resco.Controls.AdvancedList.CellEventArgs.Cell"/> and 
            its <see cref="F:Resco.Controls.AdvancedList.CellEventArgs.CellIndex"/>, and the actual displayed <see cref="F:Resco.Controls.AdvancedList.CellEventArgs.CellData"/>.
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CellEventArgs.#ctor(Resco.Controls.AdvancedList.Row,Resco.Controls.AdvancedList.Cell,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellEventArgs class.
            </summary>
            <param name="r">The row that was clicked.</param>
            <param name="c">The cell that was clicked.</param>
            <param name="ri">An index of the row in row collection.</param>
            <param name="ci">An index of the cell in row template.</param>
            <param name="yoff">Current vertical offset of the row in grid.</param>
        </member>
        <member name="F:Resco.Controls.AdvancedList.CellEventArgs.Cell">
            <summary>
            The cell that was clicked, or null if no cell at point.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.CellEventArgs.CellIndex">
            <summary>
            An index of the cell in row template, or -1 if no cell at point.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.CellEventArgs.CellData">
            <summary>
            The current displayed data.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.LinkEventHandler">
            <summary>
            Represents the method that will handle the link click event.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.LinkEventArgs">
            <summary>
            LinkEventArgs class contains the arguments of LinkEventHandler delegate.
            </summary>
            <remarks>
            LinkEventArgs are arguments for the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.LinkClick"/>  event. 
            They extend the <see cref="T:Resco.Controls.AdvancedList.CellEventArgs"/>.
            The data provided to the handler are extended with the <see cref="F:Resco.Controls.AdvancedList.LinkEventArgs.Target"/> of the link.
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.LinkEventArgs.#ctor(Resco.Controls.AdvancedList.Row,Resco.Controls.AdvancedList.Cell,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellEventArgs class.
            </summary>
            <param name="r">The row that was clicked.</param>
            <param name="c">The cell that was clicked.</param>
            <param name="ri">An index of the row in row collection.</param>
            <param name="ci">An index of the cell in row template.</param>
            <param name="yoff">Current vertical offset of the row in grid.</param>
        </member>
        <member name="F:Resco.Controls.AdvancedList.LinkEventArgs.Target">
            <summary>
            The target of the link, e.g. URL.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.ButtonEventHandler">
            <summary>
            Represents the method that will handle the button click event.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.ValidateDataEventHandler">
            <summary>
            Represents the method that will handle the validate data event.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.ValidateDataArgs">
            <summary>
            ValidataDataArgs class contains the arguments of <see cref="E:Resco.Controls.AdvancedList.AdvancedList.ValidateData"/> event.
            </summary>
            <remarks>The data provided to handler of the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.ValidateData"/> event were loaded
            from the <see cref="T:Resco.Controls.AdvancedList.IDataConnector"/> or <see cref="P:Resco.Controls.AdvancedList.AdvancedList.DataSource"/> and can be changed.
            The <see cref="F:Resco.Controls.AdvancedList.ValidateDataArgs.DataRow"/> contains the values and template indices
            and can be changed before it is displayed. The <see cref="F:Resco.Controls.AdvancedList.ValidateDataArgs.InsertIndex"/>
            contains the position, to which the <see cref="F:Resco.Controls.AdvancedList.ValidateDataArgs.DataRow"/> will be inserted. If
            <see cref="F:Resco.Controls.AdvancedList.ValidateDataArgs.Skip"/> is set to true, the <see cref="F:Resco.Controls.AdvancedList.ValidateDataArgs.DataRow"/> will not
            be inserted.</remarks>
            <seealso cref="E:Resco.Controls.AdvancedList.AdvancedList.ValidateData"/>
            <example>
            <sample name="ValidateDataArgs">
        <code lang="Visual Basic"><![CDATA[
Private Sub AdvancedList1_ValidateData(ByVal sender As Object, ByVal e As Resco.Controls.ValidateDataArgs)_
 Handles AdvancedList1.ValidateData
    ' we will use the validate data handler to load tasks by the priority
    ' before LoadData or Reload we set highPriorityIndex = 0
    
    Select Case e.DataRow("Priority")
        Case "High"
            ' We will load high priority tasks to the first positions
            e.InsertIndex = highPriorityIndex
            highPriorityIndex = highPriorityIndex + 1
        Case "Normal"
            ' and add the normal priority tasks to the end
            e.InsertIndex = -1
        Case "Low"
            ' as an exaple, we will ignore the low priority tasks
            e.Skip = True
    End Select
End Sub
            ]]></code>
        <code lang="C#"><![CDATA[
private void AdvancedList1_ValidateData(object sender, Resco.Controls.ValidateDataArgs e)
{
    // we will use the validate data handler to load tasks by the priority
    // before LoadData or Reload we set highPriorityIndex = 0
    
    switch ((string)e.DataRow["Country"])
    {
        case "High":
            // We will load high priority tasks to the first positions
            e.InsertIndex = highPriorityIndex++;
        case "Normal":
            // and add the normal priority tasks to the end
            e.InsertIndex = -1;
        case "Low":
            // as an exaple, we will ignore the low priority tasks
            e.Skip = true;
    }
}
            ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.ValidateDataArgs.#ctor(Resco.Controls.AdvancedList.Row,System.Int32)">
            <summary>
            Initializes a new instance of the ValidateDataArgs class.
            </summary>
            <param name="r">The row to be inserted.</param>
            <param name="insertIndex">Index where the row is going to be inserted.</param>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ValidateDataArgs.DataRow">
            <summary>
            The row to be inserted.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ValidateDataArgs.Skip">
            <summary>
            Indicate whether to skip the row.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.ValidateDataArgs.InsertIndex">
            <summary>
            Index where the row is going to be inserted.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CustomizeCellEventHandler">
            <summary>
            Represents the method that will handle the validate data event.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CustomizeCellEventArgs">
            <summary>
            Class containing arguments for <see cref="E:Resco.Controls.AdvancedList.AdvancedList.CustomizeCell"/> event.
            </summary>
            <remarks>Use the <see cref="P:Resco.Controls.AdvancedList.CustomizeCellEventArgs.Cell"/> or <i>Data</i> property to customize the cell to be diplayed.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CustomizeCellEventArgs.Cell">
            <summary>
            Gets the cell that is going to be displayed by the AdvancedList.
            </summary>
            <remarks>
            <p>You can change the appearance or data of the cell you want to customize.</p>
            <p>For more advanced display, you can derive own cell type from <see cref="T:Resco.Controls.AdvancedList.Cell"/> 
            overriding the <see cref="M:Resco.Controls.AdvancedList.Cell.DrawContent(System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)"/> method.</p>
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CustomizeCellEventArgs.Data">
            <summary>
            Gets or sets cell data to by displayed.
            </summary>
            <value>Data to be displayed.</value>
            <remarks>Use <i>Data</i> property instead of <see cref="!:Cell.CurrentData"/>, because <i>CurrentData</i>
            has not been initialized during <see cref="E:Resco.Controls.AdvancedList.AdvancedList.CustomizeCell"/> event.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CustomizeCellEventArgs.DataRow">
            <summary>
            Gets the data row for the current cell.
            </summary>
            <value>Data row of the current cell.</value>
        </member>
        <member name="T:Resco.Controls.AdvancedList.RowSpecificCellProperties">
            <summary>
            This classs is used to determine values that differ from default RowTemplate settings for specific cell
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.LinkCell">
            <summary>
            LinkCell is TextCell for displaying hyperlinks.
            </summary>
            <remarks>
            <p>The LinkCell is a <see cref="T:Resco.Controls.AdvancedList.TextCell"/> capable of diplaying links. 
            Link cells have different default <see cref="P:Resco.Controls.AdvancedList.LinkCell.ForeColor"/> and <see cref="P:Resco.Controls.AdvancedList.LinkCell.TextFont"/>, to
            get the look of the hyperlinks.</p>
            <p>Links can fire the <see cref="E:Resco.Controls.AdvancedList.AdvancedList.LinkClick"/> event. During handling this event 
            links change color to <see cref="P:Resco.Controls.AdvancedList.LinkCell.ActiveColor"/>. After activation, link is marked as visited, 
            and displayed with <see cref="P:Resco.Controls.AdvancedList.LinkCell.VisitedColor"/>. The link state is determined from the target 
            property, which can be indenpedent to displayed text, and is determined with the 
            <see cref="P:Resco.Controls.AdvancedList.LinkCell.UrlFormatString"/> property.</p>
            <p>You can get different behavior with combination of using the <see cref="P:Resco.Controls.AdvancedList.Cell.CellSource"/>,
            <see cref="P:Resco.Controls.AdvancedList.TextCell.FormatString"/> and <see cref="P:Resco.Controls.AdvancedList.LinkCell.UrlFormatString"/> for the same data.
            <list type="table">
            <listheader><term>Scenario</term><description>How to get it</description></listheader>
            <item><term>Constant text / constant link, Target == Text</term>
            <description>You can use <see cref="F:Resco.Controls.AdvancedList.CellSourceType.Constant"/> source of data, with FormatString and UrlFormatString both {0}.</description></item>
            <item><term>Any text / constant link, Target != Text</term>
            <description>You can use desired FormatString in conjuction with the source of data, and use constant UrlFormatString set to target (without {0} parameter), e.g. <c>UrlFormatString = "OrderForm"</c>, when displaying product name as a text.</description></item>
            <item><term>Constant text / various link, Target != Text</term>
            <description>You can use desired UrlFormatString in conjuction with the source of data, and use constant FormatString set to displayed text (without {0} parameter), e.g. <c>FormatString = "Buy Now!"</c>, and target is set to product id).</description></item>
            <item><term>Various text / various link, Target and Text bound to same source</term>
            <description>You can use desired UrlFormatString and FormatString in conjuction with the source of data, e.g. <c>FormatString="{0}"</c> and <c>UrlFormatString = "mailto://{0}"</c> as , when displaying e-mails.</description></item>
            </list></p>
            <p>The target of the link denotes the state of it, so when more combinations of LinkCells with
            data will have the same target, all will look visited after clicking on any of them.</p>
            </remarks>  
            <example>
            <sample name="LinkCell">
        <code lang="Visual Basic"><![CDATA[
' LinkCell1 is used to display the text "Help" and when clicked, 
' the Target of LinkClick event will be "Help" too
LinkCell1.CellSource.ConstantData = "Help"
LinkCell1.FormatString = "{0}"
LinkCell1.UrlFormatString = "{0}"

' LinkCell2 is used to display the product name and when clicked, 
' the Target of LinkClick event will be "OrderForm"
LinkCell2.CellSource.ColumnName = "ProductName"
LinkCell2.FormatString = "{0}"
LinkCell2.UrlFormatString = "OrderForm"

' All links displayed by the LinkCell1 or LinkCell2 will have the same target, 
' so they will all get VisitedColor after clicking on any of them.

' LinkCell3 is used to display the text "Buy now!" and when clicked, 
' the Target of LinkClick event will be set to product id
LinkCell3.CellSource.ColumnName = "ProductId"
LinkCell3.FormatString = "Buy now!"
LinkCell3.UrlFormatString = "{0}"

' LinkCell4 is used to display the email and when clicked, 
' the Target of LinkClick event will contain prefix "mailto://" for use in IE
LinkCell4.CellSource.ColumnName = "Email"
LinkCell4.FormatString = "{0}"
LinkCell4.UrlFormatString = "mailto://{0}"
            ]]></code>
        <code lang="C#"><![CDATA[
// linkCell1 is used to display the text "Help" and when clicked, 
// the Target of LinkClick event will be "Help" too
linkCell1.CellSource.ConstantData = "Help";
linkCell1.FormatString = "{0}";
linkCell1.UrlFormatString = "{0}";

// linkCell2 is used to display the product name and when clicked, 
// the Target of LinkClick event will be "OrderForm"
linkCell2.CellSource.ColumnName = "ProductName";
linkCell2.FormatString = "{0}";
linkCell2.UrlFormatString = "OrderForm";

// All links displayed by the LinkCell1 or LinkCell2 will have the same target, 
// so they will all get VisitedColor after clicking on any of them.

// linkCell3 is used to display the text "Buy now!" and when clicked, 
// the Target of LinkClick event will be set to product id
linkCell3.CellSource.ColumnName = "ProductId";
linkCell3.FormatString = "Buy now!";
linkCell3.UrlFormatString = "{0}";

// linkCell4 is used to display the email and when clicked, 
// the Target of LinkClick event will contain prefix "mailto://" for use in IE
linkCell4.CellSource.ColumnName = "Email";
linkCell4.FormatString = "{0}";
linkCell4.UrlFormatString = "mailto://{0}";
           ]]></code>
    </sample>
            </example>
        </member>
        <member name="M:Resco.Controls.AdvancedList.LinkCell.#ctor">
            <summary>
            Empty constructor, sets default values.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.LinkCell.#ctor(Resco.Controls.AdvancedList.LinkCell)">
            <summary>
            Copy constructor.
            </summary>
            <param name="cell">The Separator cell to create copy from.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.LinkCell.Clone">
            <summary>
            Clones the LinkCell.
            </summary>
            <remarks>The Cell cannot be used in more then one RowTemplate. 
            Use this method to create the copy of the cell in another template.</remarks>
            <returns>A new LinkCell with the same properties as the current LinkCell.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.LinkCell.GetLink(System.Object)">
            <summary>
            Gets the link target for given data.
            </summary>
            <param name="data">Bound data.</param>
            <returns>Link target.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.LinkCell.DrawTextLine(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws line of the text on given graphics plane.
            </summary>
            <remarks>This method is called for each line calculated in DrawAlignedText.</remarks>
            <param name="gr">Graphics to draw on.</param>
            <param name="line">Text of the line.</param>
            <param name="font">Font to use.</param>
            <param name="brush">Brush to use.</param>
            <param name="x">Left coordinate of line bounding rectangle.</param>
            <param name="y">Top coordinate of line bounding rectangle.</param>
            <param name="width">Width of line bounding rectangle.</param>
            <param name="height">Height coordinate of line bounding rectangle.</param>
            <param name="textIndex">Index of the original text where line starts.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.LinkCell.GetColor(Resco.Controls.AdvancedList.ColorCategory)">
            <summary>
            Gets the <see cref="T:System.Drawing.Color"/> of selected <see cref="T:Resco.Controls.AdvancedList.ColorCategory"/>, resolves transparency issues.
            </summary>
            <remarks>This override selects the appropriate color for the link by the state of the link.</remarks>
            <param name="c"><see cref="T:Resco.Controls.AdvancedList.ColorCategory"/> that denotes the <see cref="T:System.Drawing.Color"/>.</param>
            <returns>The actual <see cref="T:System.Drawing.Color"/> of selected <see cref="T:Resco.Controls.AdvancedList.ColorCategory"/>.</returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.LinkCell.ForeColor">
            <summary>
            Gets or sets the ForeColor for displaying the link. 
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the link.</value>
            <remarks>Default value is <see cref="P:System.Drawing.Color.Blue"/>.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.LinkCell.ActiveColor">
            <summary>
            Gets or sets the color of the active link.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the active link.</value>
            <remarks>Default value is <see cref="P:System.Drawing.Color.Yellow"/>.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.LinkCell.VisitedColor">
            <summary>
            Gets or sets the color of the visited link.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the visited link.</value>
            <remarks>Default value is <see cref="P:System.Drawing.Color.Gray"/>.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.LinkCell.TextFont">
            <summary>
            Gets or sets the font for displaying the text.
            </summary>
            <value>The <see cref="T:System.Drawing.Font"/> for displaying the text.</value>
            <remarks>Link cells font is underlined by default.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.LinkCell.UrlFormatString">
            <summary>
            Gets or sets the format string used to convert data to link target.
            </summary>
            <value>The format string used to convert data to <see cref="F:Resco.Controls.AdvancedList.LinkEventArgs.Target"/> of the 
            <see cref="E:Resco.Controls.AdvancedList.AdvancedList.LinkClick"/> event.</value>
            <remarks>The provided string is used as an argument to String.<see cref="M:System.String.Format(System.String,System.Object)"/>
            function, to convert data provided as a second argument. The data are represented
            by {0} in the format string.</remarks>
            <seealso cref="M:System.String.Format(System.String,System.Object)"/>
            <example>
            <sample name="LinkCell">
        <code lang="Visual Basic"><![CDATA[
' LinkCell1 is used to display the text "Help" and when clicked, 
' the Target of LinkClick event will be "Help" too
LinkCell1.CellSource.ConstantData = "Help"
LinkCell1.FormatString = "{0}"
LinkCell1.UrlFormatString = "{0}"

' LinkCell2 is used to display the product name and when clicked, 
' the Target of LinkClick event will be "OrderForm"
LinkCell2.CellSource.ColumnName = "ProductName"
LinkCell2.FormatString = "{0}"
LinkCell2.UrlFormatString = "OrderForm"

' All links displayed by the LinkCell1 or LinkCell2 will have the same target, 
' so they will all get VisitedColor after clicking on any of them.

' LinkCell3 is used to display the text "Buy now!" and when clicked, 
' the Target of LinkClick event will be set to product id
LinkCell3.CellSource.ColumnName = "ProductId"
LinkCell3.FormatString = "Buy now!"
LinkCell3.UrlFormatString = "{0}"

' LinkCell4 is used to display the email and when clicked, 
' the Target of LinkClick event will contain prefix "mailto://" for use in IE
LinkCell4.CellSource.ColumnName = "Email"
LinkCell4.FormatString = "{0}"
LinkCell4.UrlFormatString = "mailto://{0}"
            ]]></code>
        <code lang="C#"><![CDATA[
// linkCell1 is used to display the text "Help" and when clicked, 
// the Target of LinkClick event will be "Help" too
linkCell1.CellSource.ConstantData = "Help";
linkCell1.FormatString = "{0}";
linkCell1.UrlFormatString = "{0}";

// linkCell2 is used to display the product name and when clicked, 
// the Target of LinkClick event will be "OrderForm"
linkCell2.CellSource.ColumnName = "ProductName";
linkCell2.FormatString = "{0}";
linkCell2.UrlFormatString = "OrderForm";

// All links displayed by the LinkCell1 or LinkCell2 will have the same target, 
// so they will all get VisitedColor after clicking on any of them.

// linkCell3 is used to display the text "Buy now!" and when clicked, 
// the Target of LinkClick event will be set to product id
linkCell3.CellSource.ColumnName = "ProductId";
linkCell3.FormatString = "Buy now!";
linkCell3.UrlFormatString = "{0}";

// linkCell4 is used to display the email and when clicked, 
// the Target of LinkClick event will contain prefix "mailto://" for use in IE
linkCell4.CellSource.ColumnName = "Email";
linkCell4.FormatString = "{0}";
linkCell4.UrlFormatString = "mailto://{0}";
           ]]></code>
    </sample>
            </example>
        </member>
        <member name="P:Resco.Controls.AdvancedList.LinkCell.Active">
            <summary>
            Used to store temporary information about button state
            </summary>
            <value>bool value representing the state of button.</value>
        </member>
        <member name="T:Resco.Controls.AdvancedList.HeaderRow">
            <summary>
            Contains data and template binding for the header row.
            </summary>
            <remarks>Header row is derived from normal <see cref="T:Resco.Controls.AdvancedList.Row"/>, but
            the possibility to select the row is disabled.
            The <see cref="P:Resco.Controls.AdvancedList.HeaderRow.TemplateIndex"/> is the only template index used for the header row
            If you want to change the look of the header, change that index, or the <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/>
             the index points to.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.HeaderRow.#ctor">
            <summary>
            Creates empty header row.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.HeaderRow.#ctor(System.Int32,System.Collections.IList)">
            <summary>
            Creates new header row, with chosen template index and data with field names
            </summary>
            <param name="templateIndex">index to template set</param>
            <param name="dataList">list of field values</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.HeaderRow.#ctor(System.Int32,System.String,System.Collections.IList)">
            <summary>
            Creates new header row, with chosen template index, tag and data with field names
            </summary>
            <param name="templateIndex">index to template set</param>
            <param name="tag">tag value</param>
            <param name="dataList">list of field values</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.HeaderRow.Delete">
            <summary>
            Does nothing.
            </summary>
            <remarks>Header row cannot be deleted from the <see cref="T:Resco.Controls.AdvancedList.RowCollection"/>, and
            should not be added there. If you don't want to display header, use the 
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.ShowHeader"/> property of the <see cref="T:Resco.Controls.AdvancedList.AdvancedList"/>.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.HeaderRow.TemplateIndex">
            <summary>
            Gets or sets the header template index.
            </summary>
            <value>The header template index.</value>
            <remarks>This is the only template used for the header row, 
            because header row cannot be selected. If you want to change the look of the
            header, change this index, or the <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> the index points to.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.HeaderRow.CurrentTemplateIndex">
            <summary>
            Gets the current template index.
            </summary>
            <value>The current template index.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.HeaderRow.SelectedTemplateIndex">
            <summary>
            Not used for header row.
            </summary>
            <value>The <see cref="P:Resco.Controls.AdvancedList.HeaderRow.TemplateIndex"/>.</value>
            <remarks>The <see cref="P:Resco.Controls.AdvancedList.HeaderRow.TemplateIndex"/> is the only template index used for the header row, 
            because header row cannot be selected. If you want to change the look of the
            header, change that index, or the <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> the index points to.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.HeaderRow.Selected">
            <summary>
            Header row cannot be selected.
            </summary>
            <value>false</value>
        </member>
        <member name="T:Resco.Controls.AdvancedList.CopyOfHeaderRow">
            <summary>
            Contains data and template binding for the header row.
            </summary>
            <remarks>Header row is derived from normal <see cref="T:Resco.Controls.AdvancedList.Row"/>, but
            the possibility to select the row is disabled.
            The <see cref="P:Resco.Controls.AdvancedList.CopyOfHeaderRow.TemplateIndex"/> is the only template index used for the header row
            If you want to change the look of the header, change that index, or the <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/>
             the index points to.</remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfHeaderRow.#ctor">
            <summary>
            Creates empty header row.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfHeaderRow.#ctor(System.Int32,System.Collections.IList)">
            <summary>
            Creates new header row, with chosen template index and data with field names
            </summary>
            <param name="templateIndex">index to template set</param>
            <param name="dataList">list of field values</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfHeaderRow.#ctor(System.Int32,System.String,System.Collections.IList)">
            <summary>
            Creates new header row, with chosen template index, tag and data with field names
            </summary>
            <param name="templateIndex">index to template set</param>
            <param name="tag">tag value</param>
            <param name="dataList">list of field values</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.CopyOfHeaderRow.Delete">
            <summary>
            Does nothing.
            </summary>
            <remarks>Header row cannot be deleted from the <see cref="T:Resco.Controls.AdvancedList.RowCollection"/>, and
            should not be added there. If you don't want to display header, use the 
            <see cref="P:Resco.Controls.AdvancedList.AdvancedList.ShowHeader"/> property of the <see cref="T:Resco.Controls.AdvancedList.AdvancedList"/>.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CopyOfHeaderRow.TemplateIndex">
            <summary>
            Gets or sets the header template index.
            </summary>
            <value>The header template index.</value>
            <remarks>This is the only template used for the header row, 
            because header row cannot be selected. If you want to change the look of the
            header, change this index, or the <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> the index points to.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CopyOfHeaderRow.CurrentTemplateIndex">
            <summary>
            Gets the current template index.
            </summary>
            <value>The current template index.</value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CopyOfHeaderRow.SelectedTemplateIndex">
            <summary>
            Not used for header row.
            </summary>
            <value>The <see cref="P:Resco.Controls.AdvancedList.CopyOfHeaderRow.TemplateIndex"/>.</value>
            <remarks>The <see cref="P:Resco.Controls.AdvancedList.CopyOfHeaderRow.TemplateIndex"/> is the only template index used for the header row, 
            because header row cannot be selected. If you want to change the look of the
            header, change that index, or the <see cref="T:Resco.Controls.AdvancedList.RowTemplate"/> the index points to.</remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.CopyOfHeaderRow.Selected">
            <summary>
            Header row cannot be selected.
            </summary>
            <value>false</value>
        </member>
        <member name="T:Resco.Controls.AdvancedList.Utility">
            <summary>
            Provides helper methods for wrapping text.
            </summary>
        </member>
        <member name="F:Resco.Controls.AdvancedList.Utility.SwitchRightToLeftWordWrap">
            <summary>
            Switch RTL word wrap. Be default word wrap depends on the <see cref="P:Resco.Controls.AdvancedList.AdvancedList.RightToLeft"/> property. If <b>SwitchRightToLeftWordWrap</b> is
            set to to true, then the behavior is switched. It means, RTL word wrap is used for <b>RightToLeft</b> sets to <b>false</b> and 
            LTR word wrap is used for <b>RightToLeft</b> sets to <b>true</b>.
            </summary>
        </member>
        <member name="P:Resco.Controls.AdvancedList.Utility.CacheCapacity">
            <summary>
            Capacity of the cache of wrapped texts.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.SeparatorCell">
            <summary>
            SeparatorCell is a cell for displaying the separators.
            </summary>
            <remarks>
            <p>Separator cell is used to draw vertical or horizontal line in the middle of the cell, 
            dependent on the <see cref="P:Resco.Controls.AdvancedList.SeparatorCell.SeparatorType"/>.</p>
            <p>Vertical separator separates the cells vertically and horizontal horizontally.
            Separator draws the lines in opposite direction of the separator type, i.e.
            when separator is <see cref="!:Resco.Controls.SeparatorType.Horizontal"/>, it draws 
            the vertical line, and when separator is <see cref="!:Resco.Controls.SeparatorType.Vertical"/>,
             it draws the horizontal line.</p>
             <p>Color of the line is determined by the <see cref="P:Resco.Controls.AdvancedList.Cell.ForeColor"/> property.</p>
            </remarks>
        </member>
        <member name="M:Resco.Controls.AdvancedList.SeparatorCell.#ctor">
            <summary>
            Creates the new instance of a SeparatorCell.
            </summary>
        </member>
        <member name="M:Resco.Controls.AdvancedList.SeparatorCell.#ctor(Resco.Controls.AdvancedList.SeparatorCell)">
            <summary>
            Copy constructor.
            </summary>
            <param name="cell">The Separator cell to create copy from.</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.SeparatorCell.Clone">
            <summary>
            Clones the SeparatorCell.
            </summary>
            <remarks>The Cell cannot be used in more then one RowTemplate. 
            Use this method to create the copy of the cell in another template.</remarks>
            <returns>A new SeparatorCell with the same properties as the current SeparatorCell.</returns>
        </member>
        <member name="M:Resco.Controls.AdvancedList.SeparatorCell.DrawContent(System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Draws the contents of the cell.
            </summary>
            <param name="gr">drawing surface</param>
            <param name="drawbounds">bounds of cell</param>
            <param name="data">data to display</param>
        </member>
        <member name="M:Resco.Controls.AdvancedList.SeparatorCell.ShouldSerializeSeparatorType">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.AdvancedList.SeparatorCell.SeparatorType"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="P:Resco.Controls.AdvancedList.SeparatorCell.SeparatorType">
            <summary>
            Gets or sets the SeparatorType.
            </summary>
            <value>The <see cref="!:Resco.Controls.SeparatorType"/>, defining direction of the separator.
            </value>
            <remarks>
            Vertical separator separates the cells vertically and horizontal horizontally.
            Separator draws the lines in opposite direction of the separator type, i.e.
            when separator is <see cref="!:Resco.Controls.SeparatorType.Horizontal"/>, it draws 
            the vertical line, and when separator is <see cref="!:Resco.Controls.SeparatorType.Vertical"/>,
             it draws the horizontal line.
            </remarks>
        </member>
        <member name="P:Resco.Controls.AdvancedList.SeparatorCell.Border">
            <summary>
            SeparatorCell has no border.
            </summary>
            <value><see cref="F:Resco.Controls.AdvancedList.BorderType.None"/></value>
        </member>
        <member name="P:Resco.Controls.AdvancedList.SeparatorCell.CellSource">
            <summary>
            Separator ignores CellSource.
            </summary>
        </member>
        <member name="T:Resco.Controls.AdvancedList.ImageCache">
            <summary>
            Summary description for ImageCache.
            </summary>
        </member>
    </members>
</doc>
